;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer

(require 'widget)
(eval-when-compile
  (require 'wid-edit))
(defun gk-habit-record ()
  (interactive)
  )


(defun widget-example ()
  "Create the widgets from the Widget manual."
  (interactive)
  (switch-to-buffer "*Widget Example*")
  (kill-all-local-variables)
  (make-local-variable 'widget-example-repeat)
  (let ((inhibit-read-only t))
    (erase-buffer))
  (remove-overlays)
  (widget-insert "Here is some documentation.\n\n")
  (widget-create 'editable-field
                 :size 13
                 :format "Name: %v " ; Text after the field!
                 "My Name")
  (widget-create 'menu-choice
                 :tag "Choose"
                 :value "This"
                 :help-echo "Choose me, please!"
                 :notify (lambda (widget &rest ignore)
                           (message "%s is a good choice!"
                                    (widget-value widget)))
                 '(item :tag "This option" :value "This")
                 '(choice-item "That option")
                 '(editable-field :menu-tag "No option" "Thus option"))
  (widget-create 'editable-field
                 :format "Address: %v"
                 "Some Place\nIn some City\nSome country.")
  (widget-insert "\nSee also ")
  (widget-create 'link
                 :notify (lambda (&rest ignore)
                           (widget-value-set widget-example-repeat
                                             '("En" "To" "Tre"))
                           (widget-setup))
                 "other work")
  (widget-insert
   " for more information.\n\nNumbers: count to three below\n")
  (setq widget-example-repeat
        (widget-create 'editable-list
                       :entry-format "%i %d %v"
                       :notify
                       (lambda (widget &rest ignore)
                         (let ((old (widget-get widget
                                                ':example-length))
                               (new (length (widget-value widget))))
                           (unless (eq old new)
                             (widget-put widget ':example-length new)
                             (message "You can count to %d." new))))
                       :value '("One" "Eh, two?" "Five!")
                       '(editable-field :value "three")))
  (widget-insert "\n\nSelect multiple:\n\n")
  (widget-create 'checkbox t)
  (widget-insert " This\n")
  (widget-create 'checkbox nil)
  (widget-insert " That\n")
  (widget-create 'checkbox
                 :notify (lambda (&rest ignore) (message "Tickle"))
                 t)
  (widget-insert " Thus\n\nSelect one:\n\n")
  (widget-create 'radio-button-choice
                 :value "One"
                 :notify (lambda (widget &rest ignore)
                           (message "You selected %s"
                                    (widget-value widget)))
                 '(item "One") '(item "Another One.")
                 '(item "A Final One."))
  (widget-insert "\n")
  (widget-create 'push-button
                 :notify (lambda (&rest ignore)
                           (if (= (length
                                   (widget-value widget-example-repeat))
                                  3)
                               (message "Congratulation!")
                             (error "Three was the count!")))
                 "Apply Form")
  (widget-insert " ")
  (widget-create 'push-button
                 :notify (lambda (&rest ignore)
                           (widget-example))
                 "Reset Form")
  (widget-insert "\n")
  (use-local-map widget-keymap)
  (widget-setup))

(progn
  (tui-render-element "Hello world!")
  nil)

(tui-expander
 :heading "A label for the following collapsible lorem ipsum content"
 "Curabitur lacinia pulvinar nibh. "
 "Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio. "
 "Sed id ligula quis est convallis tempor. ")

(tui-define-component hello
  :render
  (lambda ()
    (let ((name (plist-get (tui-get-props) :name)))
      (list (format "Hello, %s!\n" name)
            "How are you?"))))

(defun widget-autofilling-example ()
  "An example of what happens if the autofilling is used in
a naive way."
  (interactive)
  (switch-to-buffer "*Widget-autofill-examle*")
  (kill-all-local-variables)
  (let ((inhibit-read-only t))
    (erase-buffer))
  (remove-overlays)
  (setq widget-author-list
	(widget-create 'editable-list
		       :entry-format "%i %d %v"
		       :value '(("" ""))
		       '(group (editable-field :size 48 :format "Full name:  %v\n"
					       :notify update-shortname)
			       (editable-field :size 36 :format "Short name: %v\n"))))
  (use-local-map widget-keymap)
  (widget-setup))

(defun update-shortname (name-widget &rest ignore)
  "Update the shortname -- the naive version."
  (save-excursion
    (let ((inhibit-modification-hooks nil))
      (widget-value-set (cadr (widget-get (widget-get name-widget :parent)
					  :children))
			(shorten-name (widget-value name-widget))))))

(defun shorten-name (name)
  "Make NAME shorter by abbreviating each word besides the first
  one to one letter."
  (let ((case-fold-search nil))
    (replace-regexp-in-string "\\(\\b[[:upper:]]\\)[[:lower:]]+\\b\\(.\\)" "\\1.\\2" name)))

(if (string= (buffer-name) gkh-record-buffer)
    (message "Already in the Habit Record.")
  ;; (when reb-target-buffer
  ;;   (remove-overlays))
  (setq gkhr-target-buffer (current-buffer)
        gkhr-target-window (selected-window))
  (select-window (or (get-buffer-window gkh-record-buffer)
		     (progn
		       ;; (setq reb-window-config (current-window-configuration))
		       (split-window (selected-window) (- (window-height) 8)))))
  (switch-to-buffer (get-buffer-create gkh-record-buffer))
  (kill-all-local-variables)
  (let ((inhibit-read-only t))
    (erase-buffer))
  (remove-overlays)
  (widget-insert "Tick the habit you have done:\n\n")
  (widget-create 'checkbox nil)
  (widget-insert " 早起\t")
  (widget-create 'checkbox nil)
  (widget-insert " 早睡\t")
  (use-local-map widget-keymap)
  (widget-setup))

(display-buffer-pop-up-frame
 (get-buffer-create "*Habit-Record*")
 '((width . 10)
   (height . 5)))

(setq gkh-frame-width-proportion 0.618)
(setq gkh-frame-height-proportion 0.618)

(defun gkh-create-frame ()
  "Create popup frame."
  (interactive)
  (let* ((edges (frame-edges))
         (x (nth 0 edges))
         (y (nth 1 edges))
         (width  (- (nth 2 edges) x))
         (height (nth 3 edges))
         (frame-width (truncate (* gkh-frame-width-proportion width)))
         (frame-height (truncate (* gkh-frame-height-proportion height)))
         (frame-x (+ x (/ (- width frame-width) 2)))
         (frame-y (+ y (/ (- height frame-height) 3))))

    ;; Make popup frame, and position at center of current frame.
    (setq gkh-frame
          (make-frame
           '((skip-taskbar . t)
             (minibuffer . nil)
             (visibility . nil)
             (internal-border-width . 1)
             (left-fringe . 1)
             (right-fringe . 1)
             (vertical-scroll-bars . nil)
	     (mode-line nil)
             (horizontal-scroll-bars . nil)
             (undecorated . nil)
             (unsplittable . t)
             )))

    ;; Configuration frame.
    (with-selected-frame gkh-frame
      ;; Delete other window first, make sure only one window in frame.
      (delete-other-windows)

      ;; Disable menu in snails frame.
      (set-frame-parameter gkh-frame 'menu-bar-lines 0)

      ;; Set frame position and size.
      (set-frame-position gkh-frame frame-x frame-y)
      (set-frame-size gkh-frame frame-width frame-height t)

      (set-window-margins (selected-window) 1 1)

      ;; (split-window (selected-window) (line-pixel-height) nil t)

      ;; Set content window margin and switch to content buffer.
      ;; (other-window 1)
      ;; (set-window-margins (selected-window) 1 1)

      ;; Focus out to hide snails frame on Mac.
      (when (featurep 'cocoa)
        (add-hook 'focus-out-hook (delete-frame gkh-frame t))))

    ;; Show popup frame.
    (make-frame-visible gkh-frame)
    (select-frame-set-input-focus gkh-frame)))