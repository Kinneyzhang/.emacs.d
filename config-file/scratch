;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer.

(load-file "~/iCloud/hack/geekblog/geekblog-vars.el")
(load-file "~/iCloud/hack/geekblog/geekblog-utils.el")
(load-file "~/iCloud/hack/geekblog/geekblog.el")
(require 'geekblog)
(pp-html-test geekblog-base-html)
(pp-html-test geekblog-index-html)


;; 关于geekblog各种文件夹的创建！！！在部分代码中需要操作文件。

(load-file "~/iCloud/hack/pp-html/pp-html-filter.el")
(load-file "~/iCloud/hack/pp-html/pp-html.el")

(require 'pp-html)

(eq 'eee 'eee)
(pp-html-test '(div :class "div" "content"
		    (link :async nil)
		    (p :class "p" "content"
		       (img :href "2" "img content")
		       (div "div-content"
			    (span))))
	      t)

(pp-html '(divv))
(pp-html '(nil))

(pp-html '())

(pp-html '(:for h ("1" "2")
		(div :class h)))

(pp-html--eval 'h)

(let ((test "emaxcs"))
  (insert ))

(pp-html-test
 '(urlset :xmlns "http://www.sitemaps.org/schemas/sitemap/0.9"
	  (:for post ($ geekblog-all-posts)
		(url (loc ($ geekblog-post-meta :abs-url post))
		     (lastmod ($ geekblog-post-meta :date post))
		     (changefreq "daily")
		     (priority "0.8"))))
 t)

(pp-html '(div :class "div" :async :id "id" "content"))

(pp-html-test '(button :class "btn" :disable nil))

(pp-html-test '(div (:include ((div .hello)
			       (div .hello)
			       (div .hello)))))

(pp-html-test '(html
		(head
		 (title "title"))
		(body
		 (header)
		 (nav)
		 (div .container
		      (div .row
			   (div .col-8
				(div "main"))
			   (div .col-4
				(div "side")))
		      (div .row @id
			   (div .col-8
				(div "main"))
			   (div .col-4
				(div "side"))))
		 )))


pp-html now supports css framework layout. If you have assigned css framework by using :css-frame in tag 'html',

(pp-html '(div  .row .col-md-5  :color "red"))

;;============================================================================

(setq language-list
      '(
	("io" . ((:command . "io")
		 (:description . "Run IO Language script")))
	("lua" . ((:command . "lua")
		  (:description . "Run Lua script")))
	("groovy" . ((:command . "groovy")
		     (:description . "Run Groovy")))
	("scala" . ((:command . "scala")
		    (:cmdopt . "-Dfile.encoding=UTF-8")
		    (:description . "Run Scala file with scala command")))

	("haml" . ((:command . "haml")
		   (:exec    . "%c %o %s")
		   (:description . "Convert HAML to HTML")))
	("sass" . ((:command . "sass")
		   (:exec    . "%c %o --no-cac")))
	))

(cdr (assoc :command (assoc  "scala"  language-list )))

(setq alist '(
	      ("at-the" ((:title . "title")
			 (:date . "date")
			 (:category . "category")))
	      ("auto" . ((:title . "title")
			 (:date . "date")
			 (:category . "category")))))


(setq alist (geekblog-generate-alist '("at-the-end-of-2019.org" "emacs-learning-note.org")))

(geekblog-get-meta alist "emacs-learning-note.org" :category)



;;====================================================================================
我写了一个查找sexp指定位置值的函数，现在想修改该位置的值，现在使用setf修改值时报错，请大家帮忙解决一下。

函数：

(defun my/get-sexp-value (location sexp)
  "Location is a list which sign the specific location in sexp."
  (let ((depth (length location))
	(value sexp))
    (dolist (num location)
      (setq value (nth num value)))
    value))


(defmacro sval (location sexp)
  (let ((value sexp))
    (dolist (num location)
      `(nth num value)
      (setq value))
    value))

(sval '(4 1 1) test)

(setf (sval '(4 1 1) test) 10)
test

例子：

(setq test '(1 2 (3 4) 5 (6 (7 8) 9)))
(my/get-sexp-value '(2 0) test) ==> 3
(my/get-sexp-value '(4 1 1) test) ==> 8

现在我想修改获取的指定位置的值，使用setf：
(setf (my/get-sexp-value '(4 1 1) test) 10)
按理应该修改8的值为10，但是报错。

(setf (nth 0 test) 10)

(setf (nth 1 (nth 1 (nth 4 test))) 10)

(defun my/get-sexp-value (location sexp)
  "Location is a list which sign the specific location in sexp."
  (let ((value sexp))
    (dolist (num location)
      (setq value (nth num value)))
    value))

(defun pp-html--nth-helper (lst acc)
  (if lst
      (pp-html--nth-helper (cdr lst)
			   (list `(nth ,(car lst) ,@acc)))
    acc))

(defmacro pp-html-nth (ns list)
  (car (pp-html--nth-helper ns `(,list))))

(let ((test '(1 2 (3 4) 5 (6 (7 8) 9))))
  (setf (pp-html-nth (4) test) '(:t :tt)))

(setf (pp-html-nth (4) test) '((:t :tt) . ((:q :qq))))
test
(setq test '(1 2 (3 4) 5 (6 (7 8) 9)))

(+ 0.1 0.2)

(display-buffer "*scratch*" '(display-buffer-at-bottom
			      (window-height . 20)))

(setq lst '(1 2 3 4))
(setcar lst "hello")
lst
(pp-html-sexp-replace 2 "hello" lst)

(let* ((test "emacs")
       (flst '(format "%s" (concat "hello" test)))
       (func `(funcall ',(car flst) ,@(cdr flst)))
       (val (eval func)))
  val)

(setq test-var "test-variable")
(setq class-test '@post)
$class-test
(pp-html--symbol-initial (pp-html--eval '$class))
(pp-html
 '(div .test-var .post-div @id :color "red" "div content"))

(pp-html--get-css-selector '(.test-var .post-div @id :color "red" "div content"))

(setq ptest1 "hello")
(setq ptest2 "emacs")
(setq ptest3 "vim")

(pp-html
 '(div :class ($ format "%s" (concat (upcase $ptest3) " " $ptest1 " " $ptest2)) $ptest1 (a :href $ptest2 "hello")))

(let* ((i 0))
  (while (< i 4)
    (let ((test (nth i '(1 2 3 4))))
      (message "%s" test)
      (incf i))))

(mapcar (lambda (e) (pp-html--eval e)) (cddr '($ upcase $ptest1 post $ptest2)))

(setq editor '("emacs" "vim" "vscode"))
(setq me "you")
(pp-html
 '(:for post $editor
	(div :class $me ($ concat $me " love " (upcase post)))))

(setq base-header
      '((div .class
	     (p "content"))
	(a @id)
	(img :href "url")))

(pp-html
 '(head .class @id (:include $base-header)))

(pp-html--get-css-selector '(.class @id))

'("hello" :upcase)
(stringp)
(setq ttest "hello")
(pp-html--filter-p '(.ttest))
(setq hello "hello")
(pp-html '(div @id $hello $hello))
(pp-html--get-child-sexp '(@id :class $hello $hello))
(load-file "~/iCloud/hack/pp-html/pp-html-filter.el")
(load-file "~/iCloud/hack/pp-html/pp-html.el")
(pp-html '(a $ttest))

(2 :add 3 :test :minus 4)

(pp-html--plist->alist '(:class "class" :id "id "))

(let ((alist (pp-html--filter-alist '(:add "class" :capfirst :addslashes "id"))))
  (insert (format "%S" alist)))

((:add "class") (:capfirst) (:addslashes "id"))

(pp-html-filter-add nil 6)

(setq ttest 5)

(pp-html--filter-p '(/ $hello :add "12" ))

(pp-html--eval '(5 |add 7))

(pp-html '(div :class (/ 5 :add 7) (/ 5 :add 7)))

(pp-html--eval '(/ 5 :add 7))

(prin1-to-string 8)

(insert '21)

(pp-html '(div :class "hello"))
(symbolp nil)

(pp-html--eval nil)

(length '($val |add 5 |length))

(setq test
      '(ul .org-ul
	   (:for post ($ geekblog-year-archive "2019")
		 (li ($ substring (geekblog-post-meta :date post) 5 10) " "
		     (a :href ($ geekblog-post-meta :rel-url post) ($ geekblog-post-meta :title post))))))

(pp-html-test test)

(define-key lisp-interaction-mode-map
  (kbd "M-RET") 'my-keybinding-test)

(defun func-test ()
  (interactive)
  (message "keybinding ook!"))

(use-package org
  :ensure nil
  :bind (:map org-mode-map
	      ("<M-return>" . func-test)))

(define-key org-mode-map (kbd "M-RET") 'nil)

(unbind-key "<M-return>" org-mode-map)

(pp-html-test geekblog-post-html)

(buffer-modified-p (get-buffer "geekblog.el"))

(setq post-var '((div $post)))
(setq posts '(div (:include $post-var)))

(let ((post "hello"))
  (dolist (post '("hello" "emacs"))
    (pp-html posts )))

(let ((post "hello"))
  (with-temp-buffer
    (insert (pp-html posts))
    (buffer-string)))

;; 在生成html前解析所有逻辑标签，生成完成的S表达式

(setq pp-include '((p @id "content")
		   (a :href "url")))

(setq pp-test '(div .class (:include $pp-include)))

(setq test nil)
(setq pp-if '(div
	      (:if $test (p "if ok.") (p "else ok."))))

(pp-html-test pp-test)

(pp-html-test (pp-html--process-include pp-test))

(pp-html--process-if pp-if)

;; (defun pp-html--process-logic-include (sexp)
;;   "Process :include logic."
;;   (--tree-map-nodes
;;    (eq (car-safe it) :include)
;;    (-setq it (pp-html--eval (cadr it)))
;;    sexp))
;;=========================================
(setq test-base
      '(div .class
	    (:block test-block1 (p "block1" (img)))
	    (:block test-block2 (p "block2"
				   (div @div
					(:for post in ("vim" "emacs" "vscode")
					      (a :href post post))
					(div (:if $test (p "if ok") (p "else ok")))
					(div (:unless $test (p "unless ok") (p "not unless ok"))))))))

(let ((test t))
  (pp-html-test test-extend))

(setq test-extend
      '(:extend $test-base
		(:block test-block1
			(p "ex-block1"))
		(:block test-block2)
		))

(--tree-reduce
 (if (member (car-safe it) pp-html-logic-element-list)
     (pp-html--process-logic test-extend))
 test-extend)

(--tree-reduce (cond ((stringp it) (concat it " " acc)) (t (let ((sn (symbol-name it))) (concat "<" sn ">" acc "</" sn ">")))) '(body (p "some words") (div "more" (b "bold") "words"))) ;; => "<body><p>some words</p> <div>more <b>bold</b> words</div></body>"

(with-current-buffer (get-buffer-create "*pp-test*")
  (erase-buffer)
  (insert (format "%S" (pp-html-parse test-base)))
  )

(pp-html--process-logic-for '(:for post in ("hello" "emacs" "vim")
				   (div :class post post)))

(pp-html-parse '(1 nil (2 nil nil) nil))

(--tree-map-nodes
 (member nil it)
 (-remove-item nil it)
 '(1 nil (2 nil nil) nil))

(--tree-map-nodes
 (and (listp it) (member nil it))
 ( it)
 '(1 nil (2 nil nil) nil))

(member nil '(1 2))

(format "%s"  '(1 nil (2 nil nil) nil))


(pp-html-parse '(div))
(pp-html--process-elem '(div))

(with-current-buffer "*pp-html-temp*"
  (erase-buffer)
  (pp-html-process-sexp
   '(div \.class (p "block1" (img)) (p "block2" (div @div ((a :href "vim" "vim") (a :href "emacs" "emacs") (a :href "vscode" "vscode")) (div (p "if ok")) (div (p "not unless ok")))))))

(pp-html-test
 '(div \.class (p "block1" (img)) (p "block2" (div @div ((a :href "vim" "vim") (a :href "emacs" "emacs") (a :href "vscode" "vscode")) (div (p "if ok")) (div (p "not unless ok"))))))

(with-temp-buffer
  (insert "hello emacs happy")
  (write-file "~/test.org"))

;; -----------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>视频压缩及格式(gif)转换</title>
<meta name="generator" content="GeekBlog 1.0.0"/>
<meta name="author" content="Your Nickname"/>
<meta name="description" content="Your Blog Description"/>
<link rel="shortcut icon" href="/assets/image/favicon.ico"/>
<link rel="bookmark" href="/assets/image/favicon.ico" type="image/x-icon"/>
</head>
<body>
<div class="container">
<div class="row">
<div class="col-12">
<header class="tophead">
<a id="logo" href="/">Your Blog Name</a>
<p class="description">Your Blog Description</p>
</header>
<nav class="topnav">
<a href="/index.html">主页</a>
<a href="/archive.html">归档</a>
<a href="/category.html">分类</a>
<a href="/about.html">关于</a>
<a href="/message.html">留言</a>
</nav>
</div>
</div>
</div>
<section class="container">
<div class="row">
<div class="col-xl-8 col-md-8 col-lg-8 col-12">
<article class="post-content mb-4">
<header>
<h1 class="title">视频压缩及格式(gif)转换</h1>
</header>
<div id="post-info">
<p>
「
<span>分类: Emacs · </span>
<span>字数: 363 · </span>
<span class="leancloud_visitors" id="/post/elisp-hack-compress-and-convert-video.html" data-flag-title="视频压缩及格式(gif)转换">
<span class="post-meta-item-text">阅读 </span>
<span class="leancloud-visitors-count">...</span>
 次
</span>
」
</p>
</div>

<p>
MacOS系统使用mov作为默认视频格式，mov格式的缺点是文件体积大，不便传输与使用。大多数时候我需要将视频压缩为mp4格式。同时，写文档时经常需要使用gif图片展示hack效果，所以将视频转为gif也成了硬需求之一。关于视频的压缩与格式转换，有很多在线工具以及app可以实现，但我更钟爱命令行工具。因为命令行比封装好的ui使用方便，可选参数多。最重要的是，可以和emacs结合。
</p>

<p>
<a href="https://www.ffmpeg.org/ffmpeg.html">ffmpeg</a> 是一个非常优秀的视频处理命令，MacOS下可使用homebrew安装。做了下小hack，以后就可以在emacs中处理视频文件，生成gif啦。
</p>

<div class="col-auto">
<pre><code class="emacs-lisp">(defun my/video-compress-and-convert (video new)
  (interactive "fvideo path: \nfnew item name (eg. exam.mp4, exam.gif) : ")
  (let ((extension (cadr (split-string (file-name-nondirectory new) "\\."))))
    (if (string= extension "gif")
	(progn
	  (shell-command
	   (concat "ffmpeg -i " video " -r 5 " new))
	  (message "%s convert to %s successfully!" video new))
      (progn
	(shell-command
	 (concat "ffmpeg -i " video " -vcodec libx264 -b:v 5000k -minrate 5000k -maxrate 5000k -bufsize 4200k -preset fast -crf 20 -y -acodec libmp3lame -ab 128k " new))
	(message "%s compress and convert to %s successfully!" video new))
      )
    ))
</code></pre>
</div>

<p>
除此之外， <code>ffmpeg</code> 的功能远不止这些，还支持视频的录制、剪辑合并、加滤镜和音频处理等，读者可以访问 <a href="https://www.ffmpeg.org">ffmpeg官网</a> 探索。
</p>

</article>
<div id="comment-block" class="mt-4"></div>
<footer class="mt-4">
<small>
©2019-2020 Your Blog Name | Licensed under 
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">
<img alt="知识共享许可协议" style="border-width:0" src="/assets/image/license.png"/>
</a>
</small>
<small>
 | Powered by 
<a href="https://github.com/Kinneyzhang/geekblog">GeekBlog</a>
</small>
</footer>
</div>
<aside class="col-xl-4 col-md-4 col-lg-4 d-none d-sm-block">
<div id="sidebar"></div>
</aside>
</div>
</section>
</body>
</html>

(defvar geek-test "hello")
geek-test
(setq geek-test2 (concat geek-test " emacs"))
geek-test2

(setq geek-test "hello2")

(defun geekblog-update-vars ()
  "Update geekblog variables after updating config."
  (interactive)
  
  )

;; base里没有默认值，extend也没有新值的情形。

(setq test1 '(html (:block b1 (p "b1"))
		   (:block b11 (p "b11-qq"))))
(setq test2 '(:extend $test1
		      (:block b1
			      (:block b2 (p @b2 "b2222")))
		      (:block b11
			      (div))))
(setq test3 '(:extend $test2
		      (:block b2 (p "newnew"))))

(pp-html test3)