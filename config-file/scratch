;; happy hacking emacs.

(op/do-publication t nil nil t)


;;;

(buffer-name (current-buffer))

(apply)

(car (last '(1 2 3 4 5)))

(remove-if-not (lambda (x) (> x 5)) '(1 2 3 4 5 6 7 8 9 10))

(cdr '(1 2 3 4 5))

(nthcdr 2 '(1 2 3 4 5))

(delq 6 '(1 6 3 4))

(delete '(5) '(1 2 (5) 3 4))

(coerce '(1 2 "hello" "emacs") 'vector)

(coerce [1 2 "hello" "emacs"] 'list)

(number-sequence 2 11 3)

(setq alist '(a b c d e))
alist
(push 'f alist)
(pop alist)

(defvar language-list
  '(
    ("io" . ((:command . "io")
             (:description . "Run IO Language script")))
    ("lua" . ((:command . "lua")
              (:description . "Run Lua script")))
    ("groovy" . ((:command . "groovy")
                 (:description . "Run Groovy")))
    ("scala" . ((:command . "scala")
                (:cmdopt . "-Dfile.encoding=UTF-8")
                (:description . "Run Scala file with scala commmyand")))

    ("haml" . ((:command . "haml")
               (:exec    . "%c %o %s")
               (:description . "Convert HAML to HTML")))
    ("sass" . ((:command . "sass")
               (:exec    . "%c %o --no-cac")))
    ))

(mapcar #'cdr language-list)

(defvar plst (list :buffer (current-buffer) :line 10 :pos 2000))
(plist-get plst :line)
(plist-member plst :line)
plst
(plist-put plst :winconf (current-window-configuration))

(defun plist-alist (plist)
  (if (null plist)
      '()
    (cons
     (list (car plist) (cadr plist))
     (plist->alist (cddr plist)))))

(plist-alist (list :x 10 :y 20 :name "point"))

(defun alist-plist (assocl)
  (if (null assocl)
      '()
    (let
	((hd (car assocl))
	 (tl (cdr assocl)))
      (cons (car hd)
	    (cons (cadr hd)
		  (alist->plist tl))))))

(alist-plist (plist->alist (list :x 10 :y 20 :name "point"))) 

(defun plist-clist (plist)
  (if (null plist)
      '()
    (cons
     (cons (car plist) (cadr plist))
     (plist-clist (cddr plist)))))

(plist-clist (list :x 10 :y 20 :name "point"))

(split-string "emacs is cool")
(split-string "emacs is cool " "m" t)

(format-time-string "%Y-%m-%d %H:%M:%S" (current-time))

(string-match "emacs" "happy hacking emacs")

(make-string 100 ??)

(symbol-name 'emacs)
(intern "emacs")

(read-from-string "(hello hello)")

;; symbol
(setq test '(1 2 3 4 5))
test
(symbolp 'test)
(symbolp test)
(boundp 'test)
(symbol-value 'test)

(defun funct ()
  (message "hello"))
(funct)
(fboundp 'funct)
(symbolp 'funct)
(symbol-function 'funct)
(symbol-function #'funct)

(subrp (symbol-function 'goto-char))

(mapcar #'eval '((+ 1 1) (* 2 3) (/ 4 2)))

(setq x 10)

(if (> x 5)
    ;; Then Statement
    (progn
      (message "Positive Number")
      (print "Greater than five")
      (split-window-vertically)
      78 ;;  Return Value
      )
  ;; Else Statement
  (progn
    (print "Less than five")
    (split-window-horizontally)
    12 ;;  Return Value
    ))

(setq a 7)

(cond
 ((evenp a) a)       ;; if   (a % 2 == 0)    ==> a
 ((> a 7) (/ a 2))   ;; elif (a > 7)         ==> a/2
 ((< a 5) (- a 1))   ;; elif (a < 5)         ==> a-1
 (t 7)               ;; else                 ==> 7
 )

(defun test-cl-case (operation x y)
  (cl-case operation
    (:mul (* x y))
    (:add (+ x y))
    (:sub (- x y))
    (:div (/ x y))
    (otherwise nil)))

((test-cl-case :mul 2 10))

(loop for i from 2 to 4 collecting (* i 2))
(loop for i from 2 to 4 summing (* i 2))
(loop for i in '(2 3 4)
      do (print (+ 1 i)))
(loop for i below 5 collecting i)

(loop
 for x in '(a b c)
 for y in '(1 2 3 4)
 collect (list x y))

(loop
 for (a b) in '((x 1) (y 2) (z 3))
 collect (list b a))

(loop for i upto 20
      if (oddp i)
      collect i into odds
      else
      collect i into evens
      finally (return (values odds evens)))

(mapcar 'capitalize '("emacs" "is" "very" "cool"))

(setq anno (lambda (x) (* x x)))
(mapcar anno '(1 2 3 4))

(remove-if 'null '(2 nil 5 nil "hello" 6 7))

(defun range (step start stop)
  (if (> start stop)
      nil
    (cons start
	  (range step (+ step start) stop))))

(range 2 4 10)

(remove-if-not (lambda (x) (= (% x 2) 0))
	       (range 1 0 10))

(setq my/list '((1 2 3) (a b c) (q w "hello")))
(add-to-list 'my/list '(5 6 "ss"))


(defun my/countdown (interval)
  (interactive "set the interval: "))

(defun my/terminal-notifier (title subtitle message)
  (shell-command
   (concat "terminal-notifier -title " title " -subtitle " subtitle " -message " message)))

(run-with-timer "10 sec" nil #'my/terminal-notifier '("hello test" "this is subtitle" "this is msg"))

;; (defun my/terminal-notifier (title msg)
;;   (call-process "terminal-notifier" nil 0 nil "-group" "Emacs"  "-title" title "-activate" "org.gnu.Emacs" "-message" msg))

(run-at-time "13:24" nil '(my/terminal-notifier "hello test" "this is subtitle" "this is msg"))

(call-process)

;; ------------------------------------------------------------------

(require 'chart)

(defun the-fastest-elpa-mirror ()
  (interactive)
  (let* ((urls
          (mapcar
           (lambda (part)
             (concat "http://" part "archive-contents"))
           '("melpa.org/packages/"
             "www.mirrorservice.org/sites/melpa.org/packages/"
             "emacs-china.org/melpa/"
             "mirrors.tuna.tsinghua.edu.cn/elpa/melpa/"
             "mirrors.163.com/elpa/melpa/"
             "mirrors.cloud.tencent.com/elpa/melpa/")))
         (durations
          (mapcar
           (lambda (url)
             (let ((start (current-time)))
               (message "Fetching %s" url)
               (call-process "curl" nil nil nil "--max-time" "10" url)
               (float-time (time-subtract (current-time) start))))
           urls)))
    (chart-bar-quickie
     'horizontal
     "The fastest elpa mirror"
     (mapcar (lambda (url) (url-host (url-generic-parse-url url))) urls) "Elpa"
     (mapcar (lambda (d) (* 1e3 d)) durations) "ms")
    (message "%s" durations)))

;;-----------------------------------------------

(defun my/quick-search-and-open (choice)
  "Choices for directories and files."
  (interactive "c[a]pp | [b]ookmark | [w]eb |")
  (cond
   ((eq choice ?a)
    (counsel-osx-app))
   ((eq choice ?b)
    (counsel-bookmark))
   ((eq choice ?w)
    (search-web))
   (t (message "Quit"))))

(defstruct account id name gender)

(setq user1 (make-account :id 19150133 :name "kinney" :gender "man"))

(account-id user1)
user1
(account-name user1)

`(hello emacs emacs is very cool ,(* 3 5))

(defmacro λ (args body)
  `(lambda ,args ,body))

(λ (x) (+ x 3))

(get-buffer-create "foobar")
(switch-to-buffer-other-window "foobar")

(defun within-buffer (name func)
  (let (currbuff (current-buffer))
    (switch-to-buffer name)
    (funcall func)
    (switch-to-buffer currbuff)))

(within-buffer "foobar" (lambda () (insert "happy hacking emacs!")))

(with-current-buffer (get-buffer-create "foobar")
  (insert "hello emacs"))

(defun buffer-mode (buffer-or-string)
  "Returns the major mode associated with a buffer."
  (with-current-buffer buffer-or-string
    major-mode))

(mapcar (lambda (b)(let((name (buffer-name b))
			(type (buffer-mode (buffer-name b))))
		     (list name type)))
	(buffer-list))

major-mode

;; -----------------------------------------------------------------------------------

(defun workflow/learn-emacs-lisp ()
  (interactive)
  (bookmark-jump "emacs-lisp-learning-note.org")
  (switch-to-buffer-other-window "*scratch*")
  (browse-url "http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html"))

(defun workflow/write-morning-journal ()
  (interactive)
  (delete-other-windows)
  (org-capture nil "j")
  (ace-window)
  (dired-jump)
  (dired-previous-line))

(require 'hydra)
(defhydra hydra-workflow (global-map "C-c w f")
  ("e" workflow/learn-emacs-lisp "learn elisp")
  ("j" workflow/write-morning-journal "write journal"))

;; ------------------------------------------------------

(defun buffer-content (name)
  (with-current-buffer name
    (buffer-substring-no-properties (point-min) (point-max))))

(buffer-content "*Help*")

(defun get-selection ()
  (interactive)
  (buffer-substring-no-properties (region-beginning) (region-end)))

(defun get-current-line ()
  (interactive)
  "Get current line, where the cursor lies in the current buffer"
  (replace-regexp-in-string "[\n|\s\t]+$" "" (thing-at-point 'line t))
  )
(get-current-line)

;;; setcdr
;; (setcdr CELL NEWCDR)
;; Set the cdr of CELL to be NEWCDR.  Returns NEWCDR.

(setq my-list '(1 2 3 4 5))
(cdr my-list)
(setcdr (cdr my-list) '(a b c))
(setcdr (cdr my-list) nil)
my-list

email: kinneyzhang666@gmail.com
(thing-at-point 'email)

(message "Hello world")
(message-box "happy hacking emacs!")

(directory-files "~/iCloud/blog_site")

(defun file-content (filename)
  (interactive "fFind file: ")
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-substring-no-properties (point-min) (point-max))))

(file-content "~/iCloud/TEMP/test.cpp")

(find-file "~/iCloud/TEMP/test.cpp")

(insert-file-contents "~/iCloud/TEMP/test.cpp")

;;; ------------------------------------------------

(defun file-contents (filename)
  (interactive "fFind file: ")
  (with-temp-buffer
    (insert-file-contents filename) ;; 先将文件内容插入临时buffer，再读取内容
    (buffer-substring-no-properties (point-min) (point-max))))

(defun my/org-journal-combination ()
  (interactive)
  (let ((journal-files (cdr (cdr (directory-files "~/iCloud/journal/")))))
    (dolist (file journal-files)
      (append-to-file (file-contents (concat "~/iCloud/journal/" file)) nil "~/iCloud/org-journal.org"))))

;;;------------------------------------------------------

(info "(emacs) Regexps")