#+STARTUP: overview
* my-packages
** auto-save

   #+BEGIN_SRC emacs-lisp
     (use-package auto-save
       :load-path "~/.emacs.d/site-lisp/auto-save"
       :config 
       (auto-save-enable)  ;; 开启自动保存功能
       (setq auto-save-slient t)) ;; 自动保存的时候静悄悄的， 不要打扰我
   #+END_SRC

** company-english-helper

   #+BEGIN_SRC emacs-lisp
      (use-package company-english-helper
	:load-path "~/.emacs.d/site-lisp/company-english-helper")
   #+END_SRC

** awesome-pair

   #+BEGIN_SRC emacs-lisp
     (use-package awesome-pair
     :load-path "~/.emacs.d/site-lisp/awesome-pair"
     :config
     (dolist (hook (list
		    'c-mode-common-hook
		    'c-mode-hook
		    'c++-mode-hook
		    'java-mode-hook
		    'haskell-mode-hook
		    'emacs-lisp-mode-hook
		    'lisp-interaction-mode-hook
		    'lisp-mode-hook
		    'maxima-mode-hook
		    'ielm-mode-hook
		    'sh-mode-hook
		    'makefile-gmake-mode-hook
		    'php-mode-hook
		    'python-mode-hook
		    'js-mode-hook
		    'go-mode-hook
		    'qml-mode-hook
		    'jade-mode-hook
		    'css-mode-hook
		    'ruby-mode-hook
		    'coffee-mode-hook
		    'rust-mode-hook
		    'qmake-mode-hook
		    'lua-mode-hook
		    'swift-mode-hook
		    'minibuffer-inactive-mode-hook
		    ))
       (add-hook hook '(lambda () (awesome-pair-mode 1))))

     (define-key awesome-pair-mode-map (kbd "(") 'awesome-pair-open-round)
     (define-key awesome-pair-mode-map (kbd "[") 'awesome-pair-open-bracket)
     (define-key awesome-pair-mode-map (kbd "{") 'awesome-pair-open-curly)
     (define-key awesome-pair-mode-map (kbd ")") 'awesome-pair-close-round)
     (define-key awesome-pair-mode-map (kbd "]") 'awesome-pair-close-bracket)
     (define-key awesome-pair-mode-map (kbd "}") 'awesome-pair-close-curly)

     (define-key awesome-pair-mode-map (kbd "%") 'awesome-pair-match-paren)
     (define-key awesome-pair-mode-map (kbd "\"") 'awesome-pair-double-quote)

     (define-key awesome-pair-mode-map (kbd "M-o") 'awesome-pair-backward-delete)
     (define-key awesome-pair-mode-map (kbd "C-d") 'awesome-pair-forward-delete)
     (define-key awesome-pair-mode-map (kbd "C-k") 'awesome-pair-kill)

     (define-key awesome-pair-mode-map (kbd "M-\"") 'awesome-pair-wrap-double-quote)
     (define-key awesome-pair-mode-map (kbd "M-[") 'awesome-pair-wrap-bracket)
     (define-key awesome-pair-mode-map (kbd "M-{") 'awesome-pair-wrap-curly)
     (define-key awesome-pair-mode-map (kbd "M-(") 'awesome-pair-wrap-round)
     (define-key awesome-pair-mode-map (kbd "M-)") 'awesome-pair-unwrap)

     (define-key awesome-pair-mode-map (kbd "M-p") 'awesome-pair-jump-right)
     (define-key awesome-pair-mode-map (kbd "M-n") 'awesome-pair-jump-left)
     (define-key awesome-pair-mode-map (kbd "M-:") 'awesome-pair-jump-out-pair-and-newline))
   #+END_SRC

** print special symbol

   #+BEGIN_SRC emacs-lisp
     (defun print-symbol-todo ()
       (interactive)
       (insert "●"))

     (defun print-symbol-done ()
       (interactive)
       (insert "×"))

     (defun print-symbol-migrated ()
       (interactive)
       (insert ">"))

     (defun print-symbol-scheduled ()
       (interactive)
       (insert "<"))

     (defun print-symbol-event ()
       (interactive)
       (insert "○"))

     (defun print-symbol-note ()
       (interactive)
       (insert "─"))

     (defun print-symbol-important ()
       (interactive)
       (insert "★"))

     (defun print-symbol-interval ()
       (interactive)
       (insert "◔"))

     (defun print-symbol-award ()
       (interactive)
       (insert "✪"))

     (defun print-tick ()
       (interactive)
       (insert "√"))

     (defun print-symbol-upper-limit ()
	 (interactive)
	 (insert "≤"))

     (defun print-symbol-lower-limit ()
	 (interactive)
	 (insert "≥"))

     (global-set-key (kbd "C-c s t") 'print-symbol-todo)
     (global-set-key (kbd "C-c s d") 'print-symbol-done)
     (global-set-key (kbd "C-c s m") 'print-symbol-migrated)
     (global-set-key (kbd "C-c s s") 'print-symbol-scheduled)
     (global-set-key (kbd "C-c s e") 'print-symbol-event)
     (global-set-key (kbd "C-c s n") 'print-symbol-note)
     (global-set-key (kbd "C-c s 1") 'print-symbol-important)
     (global-set-key (kbd "C-c s i") 'print-symbol-interval)
     (global-set-key (kbd "C-c s a") 'print-symbol-award)
     (global-set-key (kbd "C-c s u") 'print-symbol-upper-limit)
     (global-set-key (kbd "C-c s l") 'print-symbol-lower-limit)
   #+END_SRC

** all-the-icons

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :load-path "~/.emacs.d/site-lisp/all-the-icons")
   #+END_SRC

** leetcode

   #+BEGIN_SRC emacs-lisp
     (use-package furl
       :ensure t)

     (use-package graphql
       :ensure t)

     (use-package leetcode
       :load-path "~/.emacs.d/site-lisp/leetcode"
       :init (setq leetcode-account "kinneyzhang666@gmail.com"))
   #+END_SRC
** scratch-save

   #+BEGIN_SRC emacs-lisp
     (defun chunyang-scratch-save ()
       (ignore-errors
	 (with-current-buffer "*scratch*"
	   (write-region nil nil "~/.emacs.d/var/scratch"))))

     (defun chunyang-scratch-restore ()
       (let ((f "~/.emacs.d/var/scratch"))
	 (when (file-exists-p f)
	   (with-current-buffer "*scratch*"
	     (erase-buffer)
	     (insert-file-contents f)))))

     (add-hook 'kill-emacs-hook #'chunyang-scratch-save)
     (add-hook 'after-init-hook #'chunyang-scratch-restore)
   #+END_SRC

* Evil
  #+BEGIN_SRC emacs-lisp
    ;; (use-package evil
    ;;   :ensure t
    ;;   :config 
    ;;  (evil-mode -1))

    ;; (use-package evil-leader
    ;;   :ensure t
    ;;   :config
    ;;   (global-evil-leader-mode t)
    ;;   (evil-leader/set-key
    ;;     "fr" 'speedbar

    ;;     "bb" 'switch-to-buffer
    ;;     "1"  'select-window-1
    ;;     "2"  'select-window-2
    ;;     "3"  'select-window-3
    ;;     "4"  'select-window-4
    ;;     "w/" 'split-window-right
    ;;     "w-" 'split-window-below
    ;;     "wd" 'delete-window
    ;;     "wj" 'other-window
    ;;     "ww" 'delete-other-windows

    ;;     "em" 'open-my-config-file
    ;;     "ei" 'open-my-init-file

    ;;     "cc"  'org-capture
    ;;     "aa" 'org-agenda
    ;;     "as" 'org-agenda-schedule
    ;;     "ad" 'org-agenda-deadline
    ;;     "az" 'org-agenda-add-note

    ;;     "osi" 'org-insert-src-block
    ;;     "ose" 'org-edit-src-code
    ;;     "oo" 'org-open-at-point

    ;;     "ee" 'eval-last-sexp
    ;;     "q" 'save-buffers-kill-terminal
    ;;     "pf" 'counsel-git
    ;;     "t" 'shell-pop
    ;;     "/" 'evilnc-comment-or-uncomment-lines
    ;;     "d" 'dired
    ;;     "j" 'goto-line
    ;;     "hk" 'describe-key
    ;;     "hv" 'counsel-describe-variable
    ;;     "hf" 'counsel-describe-function

    ;;     "ss" 'save-buffer
    ;;     "sw" 'swiper
    ;;     "snc" 'aya-create
    ;;     "sne" 'aya-expand
    ;;     "snp" 'aya-persist-snippet

    ;;     "yy" 'youdao-dictionary-search-at-point+

    ;;     "cg" 'customize-group
    ;;     "cf" 'customize-face
    ;;     "ce" 'toggle-company-english-helper
    ;;     "v" 'er/expand-region
    ;;     ))

    ;; (evilnc-default-hotkeys)
    ;; (define-key evil-normal-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
    ;; (define-key evil-visual-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
  #+END_SRC

* Key bindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-\\") 'toggle-input-method)

    (global-set-key (kbd "C-x -") 'split-window-below)
    (global-set-key (kbd "C-x /") 'split-window-right)
    (global-set-key "\C-x\C-p" 'other-window-backward)
    (global-set-key "\C-x\C-n" 'other-window)

    (global-set-key (kbd "<f5>") 'revert-buffer)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)

    ;; helm keybindings
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x b") 'helm-buffers-list)
    ;; (global-set-key (kbd "C-y") 'helm-show-kill-ring)

    ;; ================================================

    (global-set-key (kbd "C-h f") 'counsel-describe-function)
    (global-set-key (kbd "C-h v") 'counsel-describe-variable)
    (global-set-key (kbd "C-x <f10>") 'eval-last-sexp)

    (global-set-key (kbd "C-c y s c") 'aya-create)
    (global-set-key (kbd "C-c y s p") 'aya-persist-snippet)
    (global-set-key (kbd "C-c y s e") 'aya-expand)

    (global-set-key (kbd "C-c f r") 'speedbar)

    ;; org-store-link
    (global-set-key (kbd "C-c o l") 'org-store-link)

    ;; customize group and face
    (global-set-key (kbd "C-x c g") 'customize-group)
    (global-set-key (kbd "C-x c f") 'customize-face)
    (global-set-key (kbd "C-x c t") 'customize-themes)
    (global-set-key (kbd "C-x c e") 'toggle-company-english-helper)

    (global-set-key (kbd "C-c e") 'counsel-git);;从默认git仓库中查找文件

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)

    (global-set-key (kbd "C-s") 'swiper)

    (global-set-key (kbd "C-c C-/") 'comment-or-uncomment-region)

    ;;设置M-/作为标志位，默认C-@来setmark,C-@
    ;;M-/本来对应zap-to-char，这里占用了

    ;; (global-set-key (kbd "C-c m") 'set-mark-command)
    (global-set-key (kbd "M-\/") 'set-mark-command)

    (global-set-key (kbd "C-c wu") 'browse-url)

    ;;代码缩进
    (add-hook 'prog-mode-hook '(lambda ()
				 (local-set-key (kbd "C-M-\\")
						'indent-region-or-buffer)))

    ;; (global-set-key (kbd "s-/") 'hippie-expand);;补全功能

    ;; 延迟加载
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

    ;;切换web-mode下默认tab空格数
    ; (global-set-key (kbd "C-c t i") 'my-toggle-web-indent)

    ;;标记后智能选中区域
    (global-set-key (kbd "C-=") 'er/expand-region)

    (global-set-key (kbd "M-p") 'my-org-screenshot)

    (global-set-key (kbd "<f1>") 'open-my-init-file)
    (global-set-key (kbd "<f2>") 'open-my-config-file)

    (defun open-my-init-file()
      (interactive)
      (find-file "~/.emacs.d/init.el"))

    (defun open-my-config-file()
      (interactive)
      (find-file "~/.emacs.d/myconfig.org"))

  #+END_SRC
* Better-defaults
  #+BEGIN_SRC emacs-lisp
    ;;"some better defaults"
    (setq inhibit-startup-message t)
    (setq inhibit-startup-screen t)
    (setq ring-bell-function 'ignore);;消除滑动到底部或顶部时的声音
    (global-auto-revert-mode t);;自动加载更新内容
    (setq make-backup-files nil);;不允许备份
    (setq auto-save-default t);;不允许自动保存
    (recentf-mode 1)
    (setq recentf-max-menu-items 10)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode);;显示行号
    (add-hook 'org-mode-hook 'display-line-numbers-mode);;显示行号
    (add-hook 'emacs-lisp-mode-hook 'show-paren-mode);;括号匹配
    (setq scroll-step 1 scroll-margin 3 scroll-conservatively 10000)
    (fset 'yes-or-no-p 'y-or-n-p);;用y/s 代替yes/no
    (setq default-buffer-file-coding-system 'utf-8) ;;emacs编码设置
    (prefer-coding-system 'utf-8)
    (setq ad-redefinition-action 'accept)


    ;在执行程序的时候，不需要确认
    (setq org-confirm-babel-evaluate nil)
    ;设定文档中需要执行的程序类型，以下设置了R，python，latex和emcas-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       ))

    ;; 默认分割成左右两个窗口
    ;; (setq split-height-threshold nil)
    ;; (setq split-width-threshold 0)

    (setq dired-recursive-deletes 'always)
    (setq dired-recursive-copies 'always);;全部递归拷贝删除文件夹中的文件

    (put 'dired-find-alternate-file 'disabled nil);;避免每一级目录都产生一个buffer
    (require 'dired-x)
    (setq dired-dwim-target t)

    ;;Highlight parens when inside it
    (define-advice show-paren-function (:around (fn) fix-show-paren-function)
      "Highlight enclosing parens."
      (cond ((looking-at-p "\\s(") (funcall fn))
	    (t (save-excursion
		 (ignore-errors (backward-up-list))
		 (funcall fn)))))

    ;;indent buffer
    (defun indent-buffer()
      (interactive)
      (indent-region (point-min) (point-max)))

    (defun indent-region-or-buffer()
      (interactive)
      (save-excursion
	(if (region-active-p)
	    (progn
	      (indent-region (region-beginning) (region-end))
	      (message "Indent selected region."))
	  (progn
	    (indent-buffer)
	    (message "Indent buffer.")))))

    ;;better code company
    (setq hippie-expand-try-function-list '(try-expand-debbrev
					    try-expand-debbrev-all-buffers
					    try-expand-debbrev-from-kill
					    try-complete-file-name-partially
					    try-complete-file-name
					    try-expand-all-abbrevs
					    try-expand-list
					    try-expand-line
					    try-complete-lisp-symbol-partially
					    try-complete-lisp-symbol))

  #+END_SRC

* Themes and modeline
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (require 'doom-themes)

      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t
	    doom-themes-enable-italic t)

      (load-theme 'doom-one t)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-icon t)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-github t))

    (use-package all-the-icons-dired
      :ensure t
      :config
      (require 'all-the-icons-dired)
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

    (use-package neotree
      :ensure t
      :bind (("<f8>" . neotree-toggle))
      :config
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

  #+END_SRC

* Ui-settings
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (global-hl-line-mode -1);;光标行高亮

    (global-hi-lock-mode 1) ;;使能高亮
    (setq hi-lock-file-patterns-policy #'(lambda (dummy) t)) ;;加载高亮模式

    (setq inhibit-splash-screen nil);取消默认启动窗口
    (setq-default cursor-type 'bar);变光标, setq-default设置全局
    (setq initial-frame-alist (quote ((fullscreen . maximized))));;启动最大化窗口

    (set-default-font "-*-Monaco-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")

    ;;设置窗口位置为屏库左上角(0,0)
    ;;(set-frame-position (selected-frame) 150 0)
    ;;设置宽和高
    ;;(set-frame-width (selected-frame) 139)
    ;;(set-frame-height (selected-frame) 36)
  #+END_SRC
* Org-mode
  #+BEGIN_SRC emacs-lisp
	(use-package org-bullets
	  :ensure t
	  :config
	  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

	(setq org-src-fontify-natively t)
	(setq org-agenda-files (list "~/org/gtd.org"))

	;; Set to the location of your Org files on your local system
	(setq org-directory "~/org")

	;;启动时加载org-agenda
	;; (add-hook 'after-init-hook 'org-agenda-list)

	(setq org-capture-templates 'myconfig)
	(setq org-capture-templates
	      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
		 "* TODO %?\n  %i\n"
		 :empty-lines 1)
		("d" "Diary" entry (file+datetree "~/org/diary.org")
		 "* %?\nEntered on %U\n %i\n"
		 :empty-lines 1)
		))

	;; org code block
	(defun org-insert-src-block (src-code-type)
	  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
	  (interactive
	   (let ((src-code-types
		  '("text" "emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
		    "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
		    "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
		    "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
		    "scheme" "sqlite")))
	     (list (ido-completing-read "Source code type: " src-code-types))))
	  (progn
	    (newline-and-indent)
	    (insert (format "#+BEGIN_SRC %s\n" src-code-type))
	    (newline-and-indent)
	    (insert "#+END_SRC\n")
	    (previous-line 2)
	    (org-edit-src-code)))

	(add-hook 'org-mode-hook '(lambda ()
				    ;; turn on flyspell-mode by default
						; (flyspell-mode 1)

				    ;; C-TAB for expanding
				    (local-set-key (kbd "C-<tab>")
						   'yas/expand-from-trigger-key)
				    ;; keybinding for editing source code blocks
				    (local-set-key (kbd "C-c o e")
						   'org-edit-src-code)
				    ;; keybinding for inserting code blocks
				    (local-set-key (kbd "C-c o i")
						   'org-insert-src-block)
				    ;; keybinding for org-pomodoro
				    (local-set-key (kbd "C-c o p")
						   'org-pomodoro)
				    ))

	(setq org-todo-keywords
	      '((type "年度(y!)" "月度(m!)" "|")
		(sequence "TODO(t!)"  "|" "DONE(d!)" "ABORT(a@/!)")
		))

	(setq org-todo-keyword-faces
	      '(("年度" . (:background "#20a0ff" :foreground "black" :weight bold))
		("月度" . (:background "#9a5bbd" :foreground "black" :weight bold))
		("TODO" . (:background "DarkOrange" :foreground "black" :weight bold))
		("DONE" . (:background "Darkgreen" :foreground "black" :weight bold)) 
		("ABORT" . (:background "gray" :foreground "black"))
		))

	(setq org-tag-alist '(("@work" . ?w) ("@study" . ?s) ("life" . ?l)))

	;; 优先级范围和默认任务的优先级
	(setq org-highest-priority ?A)
	(setq org-lowest-priority  ?E)
	(setq org-default-priority ?C)
	;; 优先级醒目外观
	(setq org-priority-faces
	      '((?A . (:background "red" :foreground "white" :weight bold))
		(?B . (:background "DarkOrange" :foreground "white" :weight bold))
		(?C . (:background "yellow" :foreground "DarkGreen" :weight bold))
		(?D . (:background "DodgerBlue" :foreground "black" :weight bold))
		(?E . (:background "SkyBlue" :foreground "black" :weight bold))
		))

	;; 中文换行问题
	(add-hook 'org-mode-hook 
		  (lambda () (setq truncate-lines nil)))

	;; cnfonts-edit-profile	调整字体设置, 表格中英文对齐
	(use-package cnfonts
	  :ensure t
	  :config
	  (require 'cnfonts)
	  (cnfonts-enable)
	  (setq cnfonts-profiles
		'("program" "org-mode" "read-book")))

	(defun my-open-calendar ()
	  (interactive)
	  (cfw:open-calendar-buffer
	   :contents-sources
	   (list
	    (cfw:org-create-source "#FFFFFF"))))

	(use-package calfw-org
	  :ensure t
	  :bind (("C-x cc" . my-open-calendar)))

	(use-package calfw
	  :ensure t)

	(require 'calfw)
	(require 'calfw-org)
  #+END_SRC

  #+RESULTS:
  : calfw-org

* Magit

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-x g" . magit-status)))
  #+END_SRC

* Helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config
      (helm-mode 1)
      )

    (use-package helm-company
      :ensure t
      :config
      (eval-after-load 'company
      '(progn
	 (define-key company-mode-map (kbd "C-:") 'helm-company)
	 (define-key company-active-map (kbd "C-:") 'helm-company))))

    (use-package helm-projectile
      :ensure t
      :config
      (require 'helm-projectile)
      (helm-projectile-on))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3)
      (global-company-mode t)
      )

  #+END_SRC

* JavaScript 
  #+BEGIN_SRC emacs-lisp
    ;; (use-package js2-mode
    ;;   :ensure t
    ;;   :config
    ;;   ;;js2-mode config for jsfiles    
    ;;   (setq auto-mode-alist
    ;; 	(append
    ;; 	 '(("\\.js\\'" . js2-mode)
    ;; 	   ("\\.html\\'" . web-mode)
    ;; 	   )
    ;; 	 auto-mode-alist)))

    ;;   ;;config for js2's imenu, 列出所有函数
    ;;   (defun js2-imenu-make-index ()
    ;;     (interactive)
    ;;     (save-excursion
    ;;       ;; (setq imenu-generic-expression '((nil "describe\\(\"\\(.+\\)\"" 1)))
    ;;       (imenu--generic-function '(("describe" "\\s-*describe\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
    ;; 				 ("it" "\\s-*it\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
    ;; 				 ("test" "\\s-*test\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
    ;; 				 ("before" "\\s-*before\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
    ;; 				 ("after" "\\s-*after\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
    ;; 				 ("Function" "function[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]*(" 1)
    ;; 				 ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
    ;; 				 ("Function" "^var[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
    ;; 				 ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*()[ \t]*{" 1)
    ;; 				 ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*:[ \t]*function[ \t]*(" 1)
    ;; 				 ("Task" "[. \t]task([ \t]*['\"]\\([^'\"]+\\)" 1)))))
    ;;   (add-hook 'js2-mode-hook
    ;; 	     (lambda ()
    ;; 	       (setq imenu-create-index-function 'js2-imenu-make-index)))
    ;;   (global-set-key (kbd "M-s i") 'counsel-imenu)

    ;;   (use-package js2-refactor
    ;;     :ensure t
    ;;     :config
    ;;     (add-hook 'js2-mode-hook #'js2-refactor-mode)
    ;;     (js2r-add-keybindings-with-prefix "C-c C-m"))

  #+END_SRC

* Web-mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-hook 'web-mode-hook 'my-web-mode-indent-setup)
      (add-hook 'web-mode-hook 'my-toggle-web-indent))

    (defun my-web-mode-indent-setup ()
      (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
      (setq web-mode-css-indent-offset 2)    ; web-mode, css in html file
      (setq web-mode-code-indent-offset 2)   ; web-mode, js code in html file
      )

    ;;change indent style
    (defun my-toggle-web-indent ()
      (interactive)
      ;; web development
      (if (or (eq major-mode 'js-mode) (eq major-mode 'js2-mode))
	  (progn
	    (setq js-indent-level (if (= js-indent-level 2) 4 2))
	    (setq js2-basic-offset (if (= js2-basic-offset 2) 4 2))))

      (if (eq major-mode 'web-mode)
	  (progn (setq web-mode-markup-indent-offset (if (= web-mode-markup-indent-offset 2) 4 2))
		 (setq web-mode-css-indent-offset (if (= web-mode-css-indent-offset 2) 4 2))
		 (setq web-mode-code-indent-offset (if (= web-mode-code-indent-offset 2) 4 2))))
      (if (eq major-mode 'css-mode)
	  (setq css-indent-offset (if (= css-indent-offset 2) 4 2)))

      (setq indent-tabs-mode nil))

    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))

    (setq web-mode-engines-alist
	  '(("php"    . "\\.phtml\\'")
	    ("blade"  . "\\.blade\\.")
	    ;; ("django"  . "\\.djhtml\\'")
	    ;; ("django"  . "\\.html?\\'")
	    )
	  )

    (use-package emmet-mode
      :ensure t
      :bind (("C-j" . emmet-expand-line))
      :config 
      (add-hook 'web-mode-hook 'emmet-mode))

  #+END_SRC
* Yasnippet 
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init (setq yas-snippet-dirs
		  '("~/.emacs.d/snippets"))
      :config
      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode))

  #+END_SRC

* Which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))

  #+END_SRC
* Smartparens 
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config
      (electric-pair-mode t)
      (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
  #+END_SRC

* Hungry-delete 
  #+BEGIN_SRC emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (progn
	(define-fringe-bitmap 'my-flycheck-fringe-indicator
	  (vector #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00011100
		  #b00111110
		  #b00111110
		  #b00111110
		  #b00011100
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000))

	(flycheck-define-error-level 'error
	  :severity 2
	  :overlay-category 'flycheck-error-overlay
	  :fringe-bitmap 'my-flycheck-fringe-indicator
	  :fringe-face 'flycheck-fringe-error)

	(flycheck-define-error-level 'warning
	  :severity 1
	  :overlay-category 'flycheck-warning-overlay
	  :fringe-bitmap 'my-flycheck-fringe-indicator
	  :fringe-face 'flycheck-fringe-warning)

	(flycheck-define-error-level 'info
	  :severity 0
	  :overlay-category 'flycheck-info-overlay
	  :fringe-bitmap 'my-flycheck-fringe-indicator
	  :fringe-face 'flycheck-fringe-info))
  
      :config
      (add-hook 'c++-mode-hook 'flycheck-mode)
      (add-hook 'python-mode-hook 'flycheck-mode)
      (add-hook 'js2-mode-hook 'flycheck-mode)
      (add-hook 'java-mode-hook 'flycheck-mode)
      (add-hook 'web-mode-hook 'flycheck-mode))

  #+END_SRC

* Swiper 
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t))

  #+END_SRC

* Popwin
  #+BEGIN_SRC emacs-lisp
    (use-package popwin
      :ensure t)
  #+END_SRC
  
* Window-numbering 
  #+BEGIN_SRC emacs-lisp
    (use-package window-numbering
      :ensure t
      :config
      (window-numbering-mode 1)
      (setq window-numbering-assign-func
	    (lambda () (when (equal (buffer-name) "*Calculator*") 9))))

  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      )
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
      (add-to-list 'package-archives
		   '("elpy" . "https://jorgenschaefer.github.io/packages/"))
      (package-initialize)
      (elpy-enable)
      )
  #+END_SRC

* Dashboard
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook))

    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Happy hacking emacs!  [Author:Kinney] [Email:kinneyzhang666@gmail.com]")
    (setq dashboard-startup-banner "~/.emacs.d/img/ying.png")
    (setq dashboard-items '((recents  . 8)
			    (projects . 5)
			    ))
  #+END_SRC
* Dictionary
  #+BEGIN_SRC emacs-lisp
    (use-package youdao-dictionary
      :ensure t
      :config
      ;; Enable Cache
      (setq url-automatic-caching t)
      (global-set-key (kbd "C-c y y") 'youdao-dictionary-search-at-point+)
      )
  #+END_SRC
* Search-web
  #+BEGIN_SRC emacs-lisp
    (use-package search-web
      :ensure t
      :bind (("C-c ww" . search-web)
	     ("C-c wp" . search-web-at-point)
	     ("C-c wr" . search-web-region)))
  #+END_SRC
* LSP

  #+BEGIN_SRC emacs-lisp
    ;; (use-package lsp-mode
    ;;   :ensure t
    ;;   :hook (prog-mode . lsp)
    ;;   :commands lsp)

    ;; ;; optionally
    ;; (use-package lsp-ui
    ;;   :ensure t
    ;;   :commands lsp-ui-mode)

    ;; (use-package company-lsp
    ;;   :ensure t
    ;;   :commands company-lsp)

    ;; (use-package helm-lsp
    ;;   :ensure t
    ;;   :commands helm-lsp-workspace-symbol)
  #+END_SRC
* Markdown

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode (("README\\.md\\'" . gfm-mode)
	     ("\\.md\\'" . markdown-mode)
	     ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))

    (use-package markdown-preview-mode
      :ensure t)
  #+END_SRC

* Deft
  
  #+BEGIN_SRC emacs-lisp
    (use-package deft
      :ensure t
      :bind ("<f7>" . deft)
      :commands (deft)
      :config (setq deft-directory "~/program_org"
		    deft-extensions '("md" "org")
		    deft-use-filename-as-title t))
  #+END_SRC

* Howm

  #+BEGIN_SRC emacs-lisp
    (use-package howm
      :ensure t)
  #+END_SRC

