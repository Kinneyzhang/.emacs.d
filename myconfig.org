#+STARTUP: overview
* my-packages
** auto-save

   #+BEGIN_SRC emacs-lisp
     (use-package auto-save
       :load-path "~/.emacs.d/site-lisp/auto-save"
       :config 
       (auto-save-enable)  ;; 开启自动保存功能。
       (setq auto-save-slient t)) ;; 自动保存的时候静悄悄的， 不要打扰我
   #+END_SRC

** company-english-helper

   #+BEGIN_SRC emacs-lisp
     (use-package company-english-helper
       :load-path "~/.emacs.d/site-lisp/company-english-helper"
       :defer t
       :bind (("C-x c e" . toggle-company-english-helper)))
   #+END_SRC

** awesome-pair

   #+BEGIN_SRC emacs-lisp
     (use-package awesome-pair
       :load-path "~/.emacs.d/site-lisp/awesome-pair"
       :config
       (dolist (hook (list
		      'c-mode-common-hook
		      'c-mode-hook
		      'c++-mode-hook
		      'java-mode-hook
		      'haskell-mode-hook
		      'emacs-lisp-mode-hook
		      'lisp-interaction-mode-hook
		      'lisp-mode-hook
		      'maxima-mode-hook
		      'ielm-mode-hook
		      'sh-mode-hook
		      'makefile-gmake-mode-hook
		      'php-mode-hook
		      'python-mode-hook
		      'js-mode-hook
		      'go-mode-hook
		      'qml-mode-hook
		      'jade-mode-hook
		      'css-mode-hook
		      'ruby-mode-hook
		      'coffee-mode-hook
		      'rust-mode-hook
		      'qmake-mode-hook
		      'lua-mode-hook
		      'swift-mode-hook
		      'minibuffer-inactive-mode-hook
		      ))
	 (add-hook hook '(lambda () (awesome-pair-mode 1))))

       (define-key awesome-pair-mode-map (kbd "(") 'awesome-pair-open-round)
       (define-key awesome-pair-mode-map (kbd "[") 'awesome-pair-open-bracket)
       (define-key awesome-pair-mode-map (kbd "{") 'awesome-pair-open-curly)
       (define-key awesome-pair-mode-map (kbd ")") 'awesome-pair-close-round)
       (define-key awesome-pair-mode-map (kbd "]") 'awesome-pair-close-bracket)
       (define-key awesome-pair-mode-map (kbd "}") 'awesome-pair-close-curly)

       (define-key awesome-pair-mode-map (kbd "%") 'awesome-pair-match-paren)
       (define-key awesome-pair-mode-map (kbd "\"") 'awesome-pair-double-quote)

       ;;(define-key awesome-pair-mode-map (kbd "M-o") 'awesome-pair-backward-delete)
       ;;(define-key awesome-pair-mode-map (kbd "C-d") 'awesome-pair-forward-delete)
       (define-key awesome-pair-mode-map (kbd "C-k") 'awesome-pair-kill)

       (define-key awesome-pair-mode-map (kbd "M-\"") 'awesome-pair-wrap-double-quote)
       (define-key awesome-pair-mode-map (kbd "M-[") 'awesome-pair-wrap-bracket)
       (define-key awesome-pair-mode-map (kbd "M-{") 'awesome-pair-wrap-curly)
       (define-key awesome-pair-mode-map (kbd "M-(") 'awesome-pair-wrap-round)
       (define-key awesome-pair-mode-map (kbd "M-)") 'awesoMe-pair-unwrap)

       (define-key awesome-pair-mode-map (kbd "M-p") 'awesome-pair-jump-right)
       (define-key awesome-pair-mode-map (kbd "M-n") 'awesome-pair-jump-left)
       (define-key awesome-pair-mode-map (kbd "M-:") 'awesome-pair-jump-out-pair-and-newline))
   #+END_SRC

** aweshell

   #+BEGIN_SRC emacs-lisp
     (use-package aweshell
       :load-path "~/.emacs.d/site-lisp/aweshell"
       :defer 5)
   #+END_SRC

** print special symbol

   #+BEGIN_SRC emacs-lisp
     (defun print-symbol-≥ ()
       "print more and equal"
       (interactive)
       (insert "≥"))
     (global-set-key (kbd "C-c s m e") 'print-symbol-≥)

     (defun print-symbol-≤ ()
       "print less and equal"
       (interactive)
       (insert "≤"))
     (global-set-key (kbd "C-c s l e") 'print-symbol-≤)

     (defun print-symbol-≠ ()
       "print Inequality"
       (interactive)
       (insert "≠"))
     (global-set-key (kbd "C-c s i e") 'print-symbol-≠)

     (defun print-symbol-∃ ()
       "print existence"
       (interactive)
       (insert "∃"))
     (global-set-key (kbd "C-c s e x") 'print-symbol-∃)

     (defun print-symbol-∀ ()
       "print Arbitrary"
       (interactive)
       (insert "∀"))
     (global-set-key (kbd "C-c s a b") 'print-symbol-∀)

     (defun print-symbol-⊆ ()
       "print contained"
       (interactive)
       (insert "⊆"))
     (global-set-key (kbd "C-c s c t") 'print-symbol-⊆)

     (defun print-symbol-∈ ()
       "print Belong"
       (interactive)
       (insert "∈"))
     (global-set-key (kbd "C-c s b l") 'print-symbol-∈)

     (defun print-symbol-∞ ()
       "print Infinit"
       (interactive)
       (insert "∞"))
     (global-set-key (kbd "C-c s i f") 'print-symbol-∞)

     (defun print-symbol-ξ ()
       "print ksi"
       (interactive)
       (insert "ξ"))
     (global-set-key (kbd "C-c s k s") 'print-symbol-ξ)

     (defun print-symbol-η ()
       "print eta"
       (interactive)
       (insert "η"))
     (global-set-key (kbd "C-c s e t") 'print-symbol-η)

     (defun print-symbol-ε ()
       "print Epsilon"
       (interactive)
       (insert "ε"))
     (global-set-key (kbd "C-c s e p") 'print-symbol-ε)

     (defun print-symbol-α ()
       "print Alpha"
       (interactive)
       (insert "α"))
     (global-set-key (kbd "C-c s a p") 'print-symbol-α)

     (defun print-symbol-β ()
       "print Beta"
       (interactive)
       (insert "β"))
     (global-set-key (kbd "C-c s b t") 'print-symbol-β)

     (defun print-symbol-γ ()
       "print Gamma"
       (interactive)
       (insert "γ"))
     (global-set-key (kbd "C-c s g m") 'print-symbol-γ)

     (defun print-symbol-θ ()
       "print Theta"
       (interactive)
       (insert "θ"))
     (global-set-key (kbd "C-c s t t") 'print-symbol-θ)

     (defun print-symbol-ζ ()
       "print Zeta"
       (interactive)
       (insert "ζ"))
     (global-set-key (kbd "C-c s z t") 'print-symbol-ζ)

     (defun print-symbol-Δ ()
       "print Delte"
       (interactive)
       (insert "Δ"))
     (global-set-key (kbd "C-c s d t") 'print-symbol-Δ)

     (defun print-symbol-μ ()
       "print Mu"
       (interactive)
       (insert "μ"))
     (global-set-key (kbd "C-c s m u ") 'print-symbol-μ)

     (defun print-symbol-π ()
       "print Pi"
       (interactive)
       (insert "π"))
     (global-set-key (kbd "C-c s p i") 'print-symbol-π)

     (defun print-symbol-σ ()
       "print Sigma"
       (interactive)
       (insert "σ"))
     (global-set-key (kbd "C-c s s m") 'print-symbol-σ)

     (defun print-symbol-ρ ()
       "print Rho"
       (interactive)
       (insert "ρ"))
     (global-set-key (kbd "C-c s r h") 'print-symbol-ρ)

     (defun print-symbol-ψ ()
       "print Psi"
       (interactive)
       (insert "ψ"))
     (global-set-key (kbd "C-c s p s") 'print-symbol-ψ)

     (defun print-symbol-φ ()
       "print Phi"
       (interactive)
       (insert "φ"))
     (global-set-key (kbd "C-c s p h") 'print-symbol-φ)

     ;;=================================================================
     (defun print-symbol-● ()
       (interactive)
       (insert "●"))
     (global-set-key (kbd "C-c s s d") 'print-symbol-●) ;;solid dot

     (defun print-symbol-○ ()
       (interactive)
       (insert "○"))
     (global-set-key (kbd "C-c s h d") 'print-symbol-○) ;;hollow dot

     (defun print-symbol-× ()
       (interactive)
       (insert "×"))
     (global-set-key (kbd "C-c s c h") 'print-symbol-×) ;;cross

     (defun print-symbol-★ ()
       (interactive)
       (insert "★"))
     (global-set-key (kbd "C-c s 1") 'print-symbol-★)

     (defun print-symbol-√ ()
       (interactive)
       (insert "√"))
     (global-set-key (kbd "C-c s g h") 'print-symbol-√)
     #+END_SRC

** all-the-icons

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :load-path "~/.emacs.d/site-lisp/all-the-icons"
       :defer 5)
   #+END_SRC

** leetcode

   #+BEGIN_SRC emacs-lisp
     (use-package furl
       :ensure t
       :defer 5)

     (use-package graphql
       :ensure t
       :defer 5)

     (use-package leetcode
       :load-path "~/.emacs.d/site-lisp/leetcode"
       :defer 5
       :init (setq leetcode-account "kinneyzhang666@gmail.com"))
   #+END_SRC
** scratch-save

   #+BEGIN_SRC emacs-lisp
     (defun chunyang-scratch-save ()
       (ignore-errors
	 (with-current-buffer "*scratch*"
	   (write-region nil nil "~/.emacs.d/var/scratch"))))

     (defun chunyang-scratch-restore ()
       (let ((f "~/.emacs.d/var/scratch"))
	 (when (file-exists-p f)
	   (with-current-buffer "*scratch*"
	     (erase-buffer)
	     (insert-file-contents f)))))

     (add-hook 'kill-emacs-hook #'chunyang-scratch-save)
     (add-hook 'after-init-hook #'chunyang-scratch-restore)
   #+END_SRC

** delete-block

   #+BEGIN_SRC emacs-lisp
     (use-package delete-block
       :load-path "~/.emacs.d/site-lisp/delete-block"
       :defer 5
       :bind (("C-d" . delete-block-forward)
	      ("<C-backspace>" . delete-block-backward)))

   #+END_SRC
* Key bindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c t v") 'org-tags-view)

    (global-set-key (kbd "<f9> I") 'bh/punch-in)
    (global-set-key (kbd "<f9> O") 'bh/punch-out)
    (global-set-key (kbd "<f12>") 'org-agenda)

    (global-set-key (kbd "C-x -") 'split-window-below)
    (global-set-key (kbd "C-x /") 'split-window-right)

    (global-set-key (kbd "<f5>") 'revert-buffer)

    ;; ================================================
    (global-set-key (kbd "C-x <f10>") 'eval-last-sexp)

    (global-set-key (kbd "C-c y s c") 'aya-create)
    (global-set-key (kbd "C-c y s p") 'aya-persist-snippet)
    (global-set-key (kbd "C-c y s e") 'aya-expand)

    ;; org-store-link
    (global-set-key (kbd "C-c o l") 'org-store-link)

    ;; customize group and face
    (global-set-key (kbd "C-x c g") 'customize-group)
    (global-set-key (kbd "C-x c f") 'customize-face)
    (global-set-key (kbd "C-x c t") 'customize-themes)


    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)

    (global-set-key (kbd "C-c C-/") 'comment-or-uncomment-region)

    (global-set-key (kbd "M-\/") 'set-mark-command)

    ;;代码缩进
    (add-hook 'prog-mode-hook '(lambda ()
				 (local-set-key (kbd "C-M-\\")
						'indent-region-or-buffer)))

    ;; 延迟加载
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

    ;;标记后智能选中区域
    (global-set-key (kbd "C-=") 'er/expand-region)


    (defun open-my-init-file()
      (interactive)
      (find-file "~/.emacs.d/init.el"))

    (defun open-my-config-file()
      (interactive)
      (find-file "~/.emacs.d/myconfig.org"))

    (global-set-key (kbd "<f1>") 'open-my-init-file)
    (global-set-key (kbd "<f2>") 'open-my-config-file)
  #+END_SRC

* Better-defaults
  #+BEGIN_SRC emacs-lisp
    ;;"some better defaults"
    (global-set-key (kbd "<s-backspace>") 'universal-argument)
    (setq inhibit-startup-message t)
    (setq inhibit-startup-screen t)
    (setq ring-bell-function 'ignore);;消除滑动到底部或顶部时的声音
    (global-auto-revert-mode t);;自动加载更新内容
    (setq make-backup-files nil);;不允许备份
    (setq auto-save-default t);;不允许自动保存
    (recentf-mode 1)
    (ido-mode 1)
    (setq recentf-max-menu-items 10)
    ;;(add-hook 'prog-mode-hook 'display-line-numbers-mode);;显示行号
    (add-hook 'emacs-lisp-mode-hook 'show-paren-mode);;括号匹配
    (setq scroll-step 1 scroll-margin 3 scroll-conservatively 10000)
    (fset 'yes-or-no-p 'y-or-n-p);;用y/s代替yes/no
    (setq default-buffer-file-coding-system 'utf-8) ;;emacs编码设置
    (prefer-coding-system 'utf-8)
    (setq ad-redefinition-action 'accept);在执行程序的时候，不需要确认
    (setq org-confirm-babel-evaluate nil);设定文档中需要执行的程序类型，以下设置了R，python，latex和emcas-lisp
    (setq zone-when-idle 300)
    (setq exec-path-from-shell-check-startup-files nil)
    (setq epg-gpg-program "gpg2")

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       ))

    ;; 默认分割成左右两个窗口
    ;; (setq split-height-threshold nil)
    ;; (setq split-width-threshold 0)

    (setq dired-recursive-deletes 'always)
    (setq dired-recursive-copies 'always);;全部递归拷贝删除文件夹中的文件

    (put 'dired-find-alternate-file 'disabled nil);;避免每一级目录都产生一个buffer
    (require 'dired-x)
    (setq dired-dwim-target t)

    ;;Highlight parens when inside it
    (define-advice show-paren-function (:around (fn) fix-show-paren-function)
      "Highlight enclosing parens."
      (cond ((looking-at-p "\\s(") (funcall fn))
	    (t (save-excursion
		 (ignore-errors (backward-up-list))
		 (funcall fn)))))

    ;;indent buffer
    (defun indent-buffer()
      (interactive)
      (indent-region (point-min) (point-max)))

    (defun indent-region-or-buffer()
      (interactive)
      (save-excursion
	(if (region-active-p)
	    (progn
	      (indent-region (region-beginning) (region-end))
	      (message "Indent selected region."))
	  (progn
	    (indent-buffer)
	    (message "Indent buffer.")))))

    ;;better code company
    (setq hippie-expand-try-function-list '(try-expand-debbrev
					    try-expand-debbrev-all-buffers
					    try-expand-debbrev-from-kill
					    try-complete-file-name-partially
					    try-complete-file-name
					    try-expand-all-abbrevs
					    try-expand-list
					    try-expand-line
					    try-complete-lisp-symbol-partially
					    try-complete-lisp-symbol))

    (use-package restart-emacs
      :ensure t
      :defer 5
      :bind (("C-x C-c" . restart-emacs)))

    (use-package beacon
      :ensure t
      :defer 5
      :config (beacon-mode 1))
  #+END_SRC

* Themes and modeline
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :ensure t
      :config
      (enable-theme 'dracula))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config
      ;; How tall the mode-line should be. It's only respected in GUI.
      ;; If the actual char height is larger, it respects the actual height.
      (setq doom-modeline-height 25)

      ;; How wide the mode-line bar should be. It's only respected in GUI.
      (setq doom-modeline-bar-width 3)

      (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

      ;; Whether display icons in mode-line or not.
      (setq doom-modeline-icon t)

      ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
      (setq doom-modeline-major-mode-icon t)

      ;; Whether display color icons for `major-mode'. It respects
      ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
      (setq doom-modeline-major-mode-color-icon t)

      ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
      (setq doom-modeline-buffer-state-icon t)

      ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
      ;; and `doom-modeline-buffer-state-icon'.
      (setq doom-modeline-buffer-modification-icon t)

      ;; Whether display minor modes in mode-line or not.
      (setq doom-modeline-minor-modes nil)

      ;; If non-nil, a word count will be added to the selection-info modeline segment.
      (setq doom-modeline-enable-word-count nil)

      ;; Whether display buffer encoding.
      (setq doom-modeline-buffer-encoding t)

      ;; Whether display indentation information.
      (setq doom-modeline-indent-info nil)

      ;; If non-nil, only display one number for checker information if applicable.
      (setq doom-modeline-checker-simple-format t)

      ;; The maximum displayed length of the branch name of version control.
      (setq doom-modeline-vcs-max-length 12)

      ;; Whether display perspective name or not. Non-nil to display in mode-line.
      (setq doom-modeline-persp-name t)

      ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
      (setq doom-modeline-lsp t)

      ;; Whether display github notifications or not. Requires `ghub` package.
      (setq doom-modeline-github nil)

      ;; The interval of checking github.
      (setq doom-modeline-github-interval (* 30 60))

      ;; Whether display environment version or not
      (setq doom-modeline-env-version t)
      ;; Or for individual languages
      (setq doom-modeline-env-enable-python t)
      (setq doom-modeline-env-enable-ruby t)
      (setq doom-modeline-env-enable-perl t)
      (setq doom-modeline-env-enable-go t)
      (setq doom-modeline-env-enable-elixir t)
      (setq doom-modeline-env-enable-rust t)

      ;; Change the executables to use for the language version string
      (setq doom-modeline-env-python-executable "python")
      (setq doom-modeline-env-ruby-executable "ruby")
      (setq doom-modeline-env-perl-executable "perl")
      (setq doom-modeline-env-go-executable "go")
      (setq doom-modeline-env-elixir-executable "iex")
      (setq doom-modeline-env-rust-executable "rustc")

      ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
      (setq doom-modeline-mu4e t)

      ;; Whether display irc notifications or not. Requires `circe' package.
      (setq doom-modeline-irc t)

      ;; Function to stylize the irc buffer names.
      (setq doom-modeline-irc-stylize 'identity)
      )


    (use-package all-the-icons-dired
      :ensure t
      :config
      (require 'all-the-icons-dired)
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

    (use-package neotree
      :ensure t
      :defer 5
      :bind (("<f8>" . neotree-toggle))
      :config
      (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

    (use-package fancy-battery
      :ensure t
      :config (add-hook 'after-init-hook #'fancy-battery-mode))
  #+END_SRC

* Ui-settings
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (fringe-mode 1)

    (setq display-time-default-load-average nil)
    (display-time-mode t)

    (global-hl-line-mode -1);;光标行高亮

    (global-hi-lock-mode 1) ;;使能高亮
    (setq hi-lock-file-patterns-policy #'(lambda (dummy) t)) ;;加载高亮模式

    (setq inhibit-splash-screen nil);取消默认启动窗口

    (setq initial-frame-alist (quote ((fullscreen . maximized))));;启动最大化窗口

    ;;(set-default-font "-*-Monaco-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")

    (setq-default cursor-type 'box);变光标, setq-default设置全局

    ;;==================================================

    (use-package diredfl
      ;; colorful dired-mode
      :ensure t
      :config (diredfl-global-mode t))

    ;;==================================================
    (use-package indent-guide
      :ensure t
      :config
      (add-hook 'prog-mode-hook 'indent-guide-mode)
      (add-hook 'org-mode-hook 'indent-guide-mode)
      (setq indent-guide-delay 0)
      (setq indent-guide-recursive nil)
      (setq indent-guide-char "|"))

    (use-package nyan-mode
      :ensure t
      :defer 5
      :init (setq mode-line-format (list '(:eval (list (nyan-create))))))

    (use-package wttrin
      :ensure t
      :defer 5
      :init
      (setq wttrin-default-cities '("Nanjing" "Huaian" "Hangzhou"))
      (setq wttrin-default-accept-language '("Accept-Language" . "zh-CN")))
  #+END_SRC
* Org-mode
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (setq org-src-fontify-natively t)
    (setq org-agenda-files '("~/org"))

    ;; Set to the location of your Org files on your local system
    (setq org-directory "~/org")
    (setq org-default-notes-file "~/org/inbox.org")

    ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
    (setq org-capture-templates
	  (quote (("t" "todo" entry (file "~/org/inbox.org")
		   "* TODO %?\n%U\n" :clock-in t :clock-resume t
		   :empty-lines 1)
		  ("r" "respond" entry (file "~/org/inbox.org")
		   "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n" :clock-in t :clock-resume t :immediate-finish t
		   :empty-lines 1)
		  ("n" "note" entry (file "~/org/inbox.org")
		   "* %? :NOTE:\n%U\n" :clock-in t :clock-resume t
		   :empty-lines 1)
		  ("j" "Journal" entry (file+datetree "~/org/diary.org")
		   "* %?\n Entered on %U\n" :clock-in t :clock-resume t)
		  ("w" "org-protocol" entry (file "~/org/inbox.org")
		   "* TODO Review %c\n%U\n" :immediate-finish t
		   :empty-lines 1)
		  ("m" "Meeting" entry (file "~/org/inbox.org")
		   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t
		   :empty-lines 1)
		  ("p" "Phone call" entry (file "~/org/inbox.org")
		   "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t
		   :empty-lines 1)
		  ("h" "Habit" entry (file "~/org/inbox.org")
		   "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"
		   :empty-lines 1))))


    (defun bh/remove-empty-drawer-on-clock-out ()
      "Remove empty LOGBOOK drawers on clock out"
      (interactive)
      (save-excursion
	(beginning-of-line 0)
	(org-remove-empty-drawer-at (point))))

    (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

    ;; org refile config
    ;;==================================================
					    ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
				     (org-agenda-files :maxlevel . 9))))

					    ; Use full outline paths for refile targets - we file directly with IDO
    (setq org-refile-use-outline-path t)

					    ; Targets complete directly with IDO
    (setq org-outline-path-complete-in-steps nil)

					    ; Allow refile to create parent tasks with confirmation
    (setq org-refile-allow-creating-parent-nodes (quote confirm))

					    ; Use IDO for both buffer and file completion and ido-everywhere to t
    (setq org-completion-use-ido t)
    (setq ido-everywhere t)
    (setq ido-max-directory-size 100000)
    (ido-mode (quote both))
					    ; Use the current window when visiting files and buffers with ido
    (setq ido-default-file-method 'selected-window)
    (setq ido-default-buffer-method 'selected-window)
					    ; Use the current window for indirect buffer display
    (setq org-indirect-buffer-display 'current-window)

	    ;;;; Refile settings
					    ; Exclude DONE state tasks from refile targets
    (defun bh/verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))

    (setq org-refile-target-verify-function 'bh/verify-refile-target)

    ;;; ==================================================
    ;;; ==================================================

    (setq org-agenda-span 'day)

    (setq org-stuck-projects (quote ("" nil nil "")))

    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
	(widen)
	(let ((has-subtask)
	      (subtree-end (save-excursion (org-end-of-subtree t)))
	      (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
	  (save-excursion
	    (forward-line 1)
	    (while (and (not has-subtask)
			(< (point) subtree-end)
			(re-search-forward "^\*+ " subtree-end t))
	      (when (member (org-get-todo-state) org-todo-keywords-1)
		(setq has-subtask t))))
	  (and is-a-task has-subtask))))

    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
				  (point))))
	(save-excursion
	  (bh/find-project-task)
	  (if (equal (point) task)
	      nil
	    t))))

    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
	(widen)
	(let ((has-subtask)
	      (subtree-end (save-excursion (org-end-of-subtree t)))
	      (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
	  (save-excursion
	    (forward-line 1)
	    (while (and (not has-subtask)
			(< (point) subtree-end)
			(re-search-forward "^\*+ " subtree-end t))
	      (when (member (org-get-todo-state) org-todo-keywords-1)
		(setq has-subtask t))))
	  (and is-a-task (not has-subtask)))))

    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
	    (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
	(save-excursion
	  (while (and (not is-subproject) (org-up-heading-safe))
	    (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
	      (setq is-subproject t))))
	(and is-a-task is-subproject)))

    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
	  (setq org-tags-match-list-sublevels 'indented)
	(setq org-tags-match-list-sublevels nil))
      nil)

    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
	  (setq org-tags-match-list-sublevels t)
	(setq org-tags-match-list-sublevels nil))
      nil)

    (defvar bh/hide-scheduled-and-waiting-next-tasks t)

    (defun bh/toggle-next-task-display ()
      (interactive)
      (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
      (when  (equal major-mode 'org-agenda-mode)
	(org-agenda-redo))
      (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

    (defun bh/skip-stuck-projects ()
      "Skip trees that are not stuck projects"
      (save-restriction
	(widen)
	(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	  (if (bh/is-project-p)
	      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
		     (has-next ))
		(save-excursion
		  (forward-line 1)
		  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
		    (unless (member "WAITING" (org-get-tags-at))
		      (setq has-next t))))
		(if has-next
		    nil
		  next-headline)) ; a stuck project, has subtasks but no next task
	    nil))))

    (defun bh/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (save-restriction
	(widen)
	(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	  (if (bh/is-project-p)
	      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
		     (has-next ))
		(save-excursion
		  (forward-line 1)
		  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
		    (unless (member "WAITING" (org-get-tags-at))
		      (setq has-next t))))
		(if has-next
		    next-headline
		  nil)) ; a stuck project, has subtasks but no next task
	    next-headline))))

    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
	  (save-restriction
	    (widen)
	    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
	      (cond
	       ((bh/is-project-p)
		nil)
	       ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
		nil)
	       (t
		subtree-end))))
	(save-excursion (org-end-of-subtree t))))

    (defun bh/skip-non-tasks ()
      "Show non-project tasks.
    Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
	(widen)
	(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	  (cond
	   ((bh/is-task-p)
	    nil)
	   (t
	    next-headline)))))

    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
	(widen)
	(let ((subtree-end (save-excursion (org-end-of-subtree t))))
	  (cond
	   ((bh/is-project-p)
	    subtree-end)
	   ((org-is-habit-p)
	    subtree-end)
	   (t
	    nil)))))

    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
	(widen)
	(let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	  (cond
	   ((org-is-habit-p)
	    next-headline)
	   ((and bh/hide-scheduled-and-waiting-next-tasks
		 (member "WAITING" (org-get-tags-at)))
	    next-headline)
	   ((bh/is-project-p)
	    next-headline)
	   ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
	    next-headline)
	   (t
	    nil)))))

    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
	(widen)
	(let* ((subtree-end (save-excursion (org-end-of-subtree t)))
	       (next-headline (save-excursion (or (outline-next-heading) (point-max))))
	       (limit-to-project (marker-buffer org-agenda-restrict-begin)))
	  (cond
	   ((bh/is-project-p)
	    next-headline)
	   ((org-is-habit-p)
	    subtree-end)
	   ((and (not limit-to-project)
		 (bh/is-project-subtree-p))
	    subtree-end)
	   ((and limit-to-project
		 (bh/is-project-subtree-p)
		 (member (org-get-todo-state) (list "NEXT")))
	    subtree-end)
	   (t
	    nil)))))

    (defun bh/skip-project-tasks ()
      "Show non-project tasks.
    Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
	(widen)
	(let* ((subtree-end (save-excursion (org-end-of-subtree t))))
	  (cond
	   ((bh/is-project-p)
	    subtree-end)
	   ((org-is-habit-p)
	    subtree-end)
	   ((bh/is-project-subtree-p)
	    subtree-end)
	   (t
	    nil)))))

    (defun bh/skip-non-project-tasks ()
      "Show project tasks.
    Skip project and sub-project tasks, habits, and loose non-project tasks."
      (save-restriction
	(widen)
	(let* ((subtree-end (save-excursion (org-end-of-subtree t)))
	       (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
	  (cond
	   ((bh/is-project-p)
	    next-headline)
	   ((org-is-habit-p)
	    subtree-end)
	   ((and (bh/is-project-subtree-p)
		 (member (org-get-todo-state) (list "NEXT")))
	    subtree-end)
	   ((not (bh/is-project-subtree-p))
	    subtree-end)
	   (t
	    nil)))))

    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
	(widen)
	(let ((subtree-end (save-excursion (org-end-of-subtree t))))
	  (cond
	   ((bh/is-project-p)
	    subtree-end)
	   ((org-is-habit-p)
	    subtree-end)
	   (t
	    nil)))))

    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
	(if (bh/is-subproject-p)
	    nil
	  next-headline)))

    (defun org-is-habit-p ())

    ;;; ==================================================

    ;; Do not dim blocked tasks
    (setq org-agenda-dim-blocked-tasks nil)

    ;; Compact the block agenda view
    (setq org-agenda-compact-blocks t)

    ;; Custom agenda command definitions
    (setq org-agenda-custom-commands
	  (quote (("o" "Omni Agenda"
		   ((agenda "" nil)
		    (tags "REFILE"
			      ((org-agenda-overriding-header "Inbox, task to refile!")
			       (org-tags-match-list-sublevels nil)))))
		  ("N" "Notes" tags "NOTE"
		   ((org-agenda-overriding-header "Notes")
		    (org-tags-match-list-sublevels t)))
		  ("h" "Habits" tags-todo "STYLE=\"habit\""
		   ((org-agenda-overriding-header "Habits")
		    (org-agenda-sorting-strategy
		     '(todo-state-down effort-up category-keep))))
		  (" " "Agenda"
		   ((agenda "" nil)
		    (tags "REFILE"
			  ((org-agenda-overriding-header "Tasks to Refile")
			   (org-tags-match-list-sublevels nil)))
		    (tags-todo "-CANCELLED/!"
			       ((org-agenda-overriding-header "Stuck Projects")
				(org-agenda-skip-function 'bh/skip-non-stuck-projects)
				(org-agenda-sorting-strategy
				 '(category-keep))))
		    (tags-todo "-HOLD-CANCELLED/!"
			       ((org-agenda-overriding-header "Projects")
				(org-agenda-skip-function 'bh/skip-non-projects)
				(org-tags-match-list-sublevels 'indented)
				(org-agenda-sorting-strategy
				 '(category-keep))))
		    (tags-todo "-CANCELLED/!NEXT"
			       ((org-agenda-overriding-header (concat "Project Next Tasks"
								      (if bh/hide-scheduled-and-waiting-next-tasks
									  ""
									" (including WAITING and SCHEDULED tasks)")))
				(org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
				(org-tags-match-list-sublevels t)
				(org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-sorting-strategy
				 '(todo-state-down effort-up category-keep))))
		    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
			       ((org-agenda-overriding-header (concat "Project Subtasks"
								      (if bh/hide-scheduled-and-waiting-next-tasks
									  ""
									" (including WAITING and SCHEDULED tasks)")))
				(org-agenda-skip-function 'bh/skip-non-project-tasks)
				(org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-sorting-strategy
				 '(category-keep))))
		    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
			       ((org-agenda-overriding-header (concat "Standalone Tasks"
								      (if bh/hide-scheduled-and-waiting-next-tasks
									  ""
									" (including WAITING and SCHEDULED tasks)")))
				(org-agenda-skip-function 'bh/skip-project-tasks)
				(org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-sorting-strategy
				 '(category-keep))))
		    (tags-todo "-CANCELLED+WAITING|HOLD/!"
			       ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
								      (if bh/hide-scheduled-and-waiting-next-tasks
									  ""
									" (including WAITING and SCHEDULED tasks)")))
				(org-agenda-skip-function 'bh/skip-non-tasks)
				(org-tags-match-list-sublevels nil)
				(org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
				(org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
		    (tags "-REFILE/"
			  ((org-agenda-overriding-header "Tasks to Archive")
			   (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
			   (org-tags-match-list-sublevels nil))))
		   nil))))

    ;; ==================================================


    (setq org-todo-keywords
	  (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
		  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))


    (setq org-todo-keyword-faces
	  (quote (("TODO" :foreground "red" :weight bold)
		  ("NEXT" :foreground "blue" :weight bold)
		  ("DONE" :foreground "forest green" :weight bold)
		  ("WAITING" :foreground "orange" :weight bold)
		  ("HOLD" :foreground "magenta" :weight bold)
		  ("CANCELLED" :foreground "forest green" :weight bold)
		  ("MEETING" :foreground "forest green" :weight bold)
		  ("PHONE" :foreground "forest green" :weight bold))))

    ;; to state tiggers
    (setq org-todo-state-tags-triggers
	  (quote (("CANCELLED" ("CANCELLED" . t))
		  ("WAITING" ("WAITING" . t))
		  ("HOLD" ("WAITING") ("HOLD" . t))
		  (done ("WAITING") ("HOLD"))
		  ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
		  ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
		  ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

    ;; filtering
    ;; (defun bh/org-auto-exclude-function (tag)
    ;;   "Automatic task exclusion in the agenda with / RET"
    ;;   (and (cond
    ;; 	((string= tag "hold")
    ;; 	 t)
    ;; 	((string= tag "farm")
    ;; 	 t))
    ;;        (concat "-" tag)))

    ;; (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)


    ;; Tags with fast selection keys
    (setq org-tag-alist (quote ((:startgroup)
				("@office" . ?o)
				("@home" . ?H)
				(:endgroup)
				("WAITING" . ?w)
				("HOLD" . ?h)
				("PERSONAL" . ?P)
				("WORK" . ?W)
				("NOTE" . ?n)
				("CANCELLED" . ?c)
				("FLAGGED" . ??)
				("emacs" . ?e)
				)))

					    ; Allow setting single tags without the menu
    (setq org-fast-tag-selection-single-key (quote expert))

					    ; For tag searches ignore tasks with scheduled and deadline dates
    (setq org-agenda-tags-todo-honor-ignore-options t)

    ;; cycle through the todo states but skip setting timestamps.
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)


    ;; 优先级范围和默认任务的优先级
    (setq org-highest-priority ?A)
    (setq org-lowest-priority  ?E)
    (setq org-default-priority ?C)
    ;; 优先级醒目外观
    (setq org-priority-faces
	  '((?A . (:background "red" :foreground "white" :weight bold))
	    (?B . (:background "DarkOrange" :foreground "white" :weight bold))
	    (?C . (:background "yellow" :foreground "DarkGreen" :weight bold))
	    (?D . (:background "DodgerBlue" :foreground "black" :weight bold))
	    (?E . (:background "SkyBlue" :foreground "black" :weight bold))
	    ))


    ;; =====================clock setup=============================

    ;; Resume clocking task when emacs is restarted
    (org-clock-persistence-insinuate)
    ;;
    ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
    (setq org-clock-history-length 23)
    ;; Resume clocking task on clock-in if the clock is open
    (setq org-clock-in-resume t)
    ;; Change tasks to NEXT when clocking in
    (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
    ;; Separate drawers for clocking and logs
    (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Save the running clock and all clock history when exiting Emacs, load it on startup
    (setq org-clock-persist t)
    ;; Do not prompt to resume an active clock
    (setq org-clock-persist-query-resume nil)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
    ;; Include current clocking task in clock reports
    (setq org-clock-report-include-clocking-task t)

    (setq bh/keep-clock-running nil)

    (defun bh/clock-in-to-next (kw)
      "Switch a task from TODO to NEXT when clocking in.
	Skips capture tasks, projects, and subprojects.
	Switch projects and subprojects from NEXT back to TODO"
      (when (not (and (boundp 'org-capture-mode) org-capture-mode))
	(cond
	 ((and (member (org-get-todo-state) (list "TODO"))
	       (bh/is-task-p))
	  "NEXT")
	 ((and (member (org-get-todo-state) (list "NEXT"))
	       (bh/is-project-p))
	  "TODO"))))

    (defun bh/find-project-task ()
      "Move point to the parent (project) task if any"
      (save-restriction
	(widen)
	(let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
	  (while (org-up-heading-safe)
	    (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
	      (setq parent-task (point))))
	  (goto-char parent-task)
	  parent-task)))

    (defun bh/punch-in (arg)
      "Start continuous clocking and set the default task to the
	selected task.  If no task is selected set the Organization task
	as the default task."
      (interactive "p")
      (setq bh/keep-clock-running t)
      (if (equal major-mode 'org-agenda-mode)
	  ;;
	  ;; We're in the agenda
	  ;;
	  (let* ((marker (org-get-at-bol 'org-hd-marker))
		 (tags (org-with-point-at marker (org-get-tags-at))))
	    (if (and (eq arg 4) tags)
		(org-agenda-clock-in '(16))
	      (bh/clock-in-organization-task-as-default)))
	;;
	;; We are not in the agenda
	;;
	(save-restriction
	  (widen)
					    ; Find the tags on the current task
	  (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
	      (org-clock-in '(16))
	    (bh/clock-in-organization-task-as-default)))))

    (defun bh/punch-out ()
      (interactive)
      (setq bh/keep-clock-running nil)
      (when (org-clock-is-active)
	(org-clock-out))
      (org-agenda-remove-restriction-lock))

    (defun bh/clock-in-default-task ()
      (save-excursion
	(org-with-point-at org-clock-default-task
	  (org-clock-in))))

    (defun bh/clock-in-parent-task ()
      "Move point to the parent (project) task if any and clock in"
      (let ((parent-task))
	(save-excursion
	  (save-restriction
	    (widen)
	    (while (and (not parent-task) (org-up-heading-safe))
	      (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
		(setq parent-task (point))))
	    (if parent-task
		(org-with-point-at parent-task
		  (org-clock-in))
	      (when bh/keep-clock-running
		(bh/clock-in-default-task)))))))

    (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

    (defun bh/clock-in-organization-task-as-default ()
      (interactive)
      (org-with-point-at (org-id-find bh/organization-task-id 'marker)
	(org-clock-in '(16))))

    (defun bh/clock-out-maybe ()
      (when (and bh/keep-clock-running
		 (not org-clock-clocking-in)
		 (marker-buffer org-clock-default-task)
		 (not org-clock-resolving-clocks-due-to-idleness))
	(bh/clock-in-parent-task)))

    (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

    (setq org-time-stamp-rounding-minutes (quote (1 1)))

    (setq org-agenda-clock-consistency-checks
	  (quote (:max-duration "4:00"
				:min-duration 0
				:max-gap 0
				:gap-ok-around ("4:00"))))

    ;;; ==================================================

    ;;; =================Time Reporting and Tracking=================================
    (setq org-clock-out-remove-zero-time-clocks t)

    ;; Agenda clock report parameters
    (setq org-agenda-clockreport-parameter-plist
	  (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

    ;; Set default column view headings: Task Effort Clock_Summary
    (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

    ;; global Effort estimate values
    ;; global STYLE property values for completion
    (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
					("STYLE_ALL" . "habit"))))

    ;; Agenda log mode items to display (closed and state changes by default)
    (setq org-agenda-log-mode-items (quote (closed state)))

    ;;; ==================================================

    ;; ==================================================
    ;; 中文换行问题
    (add-hook 'org-mode-hook 
	      (lambda () (setq truncate-lines nil)))


    ;; org code block
    (defun org-insert-src-block (src-code-type)
      "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
      (interactive
       (let ((src-code-types
	      '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
		"calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
		"octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
		"haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
		"scheme" "sqlite")))
	 (list (ido-completing-read "Source code type: " src-code-types))))
      (progn
	(newline-and-indent)
	(insert (format "#+BEGIN_SRC %s\n" src-code-type))
	(newline-and-indent)
	(insert "#+END_SRC\n")
	(previous-line 2)
	(org-edit-src-code)))

    (add-hook 'org-mode-hook '(lambda ()
				;; turn on flyspell-mode by default
					    ; (flyspell-mode 1)

				;; C-TAB for expanding
				(local-set-key (kbd "C-<tab>")
					       'yas/expand-from-trigger-key)
				;; keybinding for editing source code blocks
				(local-set-key (kbd "C-c o e")
					       'org-edit-src-code)
				;; keybinding for inserting code blocks
				(local-set-key (kbd "C-c o i")
					       'org-insert-src-block)
				;; keybinding for org-pomodoro
				(local-set-key (kbd "C-c o p")
					       'org-pomodoro)
				))


    (defun my-open-calendar ()
      (interactive)
      (cfw:open-calendar-buffer
       :contents-sources
       (list
	(cfw:org-create-source "#FFFFFF"))))

    (use-package calfw-org
      :ensure t
      :defer 5
      :bind (("C-x cc" . my-open-calendar)))

    (use-package calfw
      :ensure t
      :defer 5)

    (require 'calfw-org)
    (require 'calfw)

    (use-package move-text
      :ensure t
      :defer 5
      :config (move-text-default-bindings))

    (use-package htmlize
      :ensure t
      :defer 5)

     (use-package idle-org-agenda
	 :after org-agenda
	 :ensure t
	 :init (setq idle-org-agenda-interval 300)
	 :config (idle-org-agenda-mode))
  #+END_SRC

* Magit

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-x g" . magit-status)))
  #+END_SRC

* Ivy && posframe
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :diminish (ivy-mode . "")
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
      (setq ivy-use-virtual-buffers t)
      ;; number of result lines to display
      (setq ivy-height 15)
      ;; does not count candidates
      (setq ivy-count-format "")
      ;; no regexp by default
      (setq ivy-initial-inputs-alist nil)
      ;; configure regexp engine.
      (setq ivy-re-builders-alist
	    ;; allow input not in order
	    '((t . ivy--regex-ignore-order))))


    (use-package posframe
      :ensure t)

    ;; (defun ivy-posframe-display-at-frame-top-center (str)
    ;;   (ivy-posframe--display str #'posframe-poshandler-frame-top-center))

    (use-package ivy-posframe
      :ensure t
      :init
      (progn
	(setq ivy-posframe-parameters '((left-fringe . 8) (right-fringe . 8)))
	(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
	(setq ivy-posframe-height nil)
	(setq ivy-posframe-width 100))
	:config
	(ivy-posframe-mode t))


    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper))
      :init (setq ivy-use-virtual-buffers t)
      :config
      (ivy-mode 1))

    (use-package projectile
      :ensure t)

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

    (use-package counsel-osx-app
      :ensure t
      :defer 5)

    (use-package spotlight
      :ensure t
      :defer 5)

    (use-package all-the-icons-ivy
      :ensure t
      :config
      (all-the-icons-ivy-setup)
      (setq all-the-icons-ivy-buffer-commands '())
      (setq all-the-icons-ivy-file-commands
	    '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir)))

    (use-package ivy-rich
      :ensure t
      :config
      (ivy-rich-mode 1)
      (setq ivy-format-function #'ivy-format-function-line)
      (setq ivy-rich--display-transformers-list
	    '(ivy-switch-buffer
	      (:columns
	       ((ivy-rich-candidate (:width 30))  ; return the candidate itself
		(ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
		(ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
		(ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
		(ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
		(ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
	       :predicate
	       (lambda (cand) (get-buffer cand)))
	      counsel-M-x
	      (:columns
	       ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
		(ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
	      counsel-describe-function
	      (:columns
	       ((counsel-describe-function-transformer (:width 40))  ; the original transformer
		(ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
	      counsel-describe-variable
	      (:columns
	       ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
		(ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
	      counsel-recentf
	      (:columns
	       ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
		(ivy-rich-file-last-modified-time (:face font-lock-comment-face))))) ; return the last modified time of the file
	    ))

    (use-package counsel
      :ensure nil
      :bind (("M-x" . counsel-M-x)
	     ("C-c e" . counsel-git)
	     ("C-c t l" . counsel-load-theme)
	     ("C-x C-f" . counsel-find-file)
	     ("C-x r b" . counsel-bookmark)
	     ("C-x r D" . bookmark-delete)
	     ))

    (use-package counsel-world-clock
      :ensure t
      :defer 5)
  #+END_SRC

* Avy/Link

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :defer 5
      :bind (("M-g c" . avy-goto-char-timer)
	     ("M-g l" . avy-goto-line)))

    (use-package link-hint
      :ensure t
      :defer 5
      :bind
      ("C-c l o" . link-hint-open-link)
      ("C-c l c" . link-hint-copy-link)
      ("C-c l i" . org-insert-link)
      ("C-c l s" . org-store-link))
  #+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :defer 5
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3)
      (global-company-mode t))

    (use-package company-box
      :ensure t
      :init (setq company-box-icons-alist 'company-box-icons-all-the-icons)
      :hook (company-mode . company-box-mode))
  #+END_SRC
* C++

  #+BEGIN_SRC emacs-lisp
    (use-package google-c-style
      :ensure t)
  #+END_SRC

* Yasnippet 
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :defer t
      :init (setq yas-snippet-dirs
		  '("~/.emacs.d/snippets"))
      :config
      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode))

  #+END_SRC

* key-Which

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))

  #+END_SRC

* Smartparens 

  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config
      (electric-pair-mode t)
      (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))

    (use-package paredit
      ;; check if the parens is matched
      :ensure t)
  #+END_SRC

* Hungry-delete

  #+BEGIN_SRC emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))
  #+END_SRC

* Flycheck

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :defer 5
      :init
      (progn
	(define-fringe-bitmap 'my-flycheck-fringe-indicator
	  (vector #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00011100
		  #b00111110
		  #b00111110
		  #b00111110
		  #b00011100
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000
		  #b00000000))

	(flycheck-define-error-level 'error
	  :severity 2
	  :overlay-category 'flycheck-error-overlay
	  :fringe-bitmap 'my-flycheck-fringe-indicator
	  :fringe-face 'flycheck-fringe-error)

	(flycheck-define-error-level 'warning
	  :severity 1
	  :overlay-category 'flycheck-warning-overlay
	  :fringe-bitmap 'my-flycheck-fringe-indicator
	  :fringe-face 'flycheck-fringe-warning)

	(flycheck-define-error-level 'info
	  :severity 0
	  :overlay-category 'flycheck-info-overlay
	  :fringe-bitmap 'my-flycheck-fringe-indicator
	  :fringe-face 'flycheck-fringe-info))

      :config
      (add-hook 'c++-mode-hook 'flycheck-mode)
      (add-hook 'python-mode-hook 'flycheck-mode)
      (add-hook 'js2-mode-hook 'flycheck-mode)
      (add-hook 'java-mode-hook 'flycheck-mode)
      (add-hook 'web-mode-hook 'flycheck-mode))

  #+END_SRC

* Popwin
  #+BEGIN_SRC emacs-lisp
    (use-package popwin
      :ensure t
      :defer 5)
  #+END_SRC
  
* Windows & Buffer

  #+BEGIN_SRC emacs-lisp
    (use-package window-numbering
      :ensure t
      :init
      (setq window-numbering-assign-func
	    (lambda () (when (equal (buffer-name) "*Calculator*") 9)))
      :config
      (window-numbering-mode 1))
  #+END_SRC
* Dashboard

  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :init
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-banner-logo-title "Happy hacking emacs!  [Author:Kinney] [Email:kinneyzhang666@gmail.com]")
      (setq dashboard-startup-banner "~/.emacs.d/img/ying.png")
      (setq dashboard-items '((recents  . 8) (projects . 5)))
      :config
      (dashboard-setup-startup-hook))
  #+END_SRC

* Dictionary

  #+BEGIN_SRC emacs-lisp
    (use-package youdao-dictionary
      :ensure t
      :defer 5
      :init
      (setq url-automatic-caching t) ;; Enable Cache
      :bind (("C-c y y" . youdao-dictionary-search-at-point+)
	     ("C-c y i" . youdao-dictionary-search-from-input)))
  #+END_SRC

* Xwidget-webkit

  #+BEGIN_SRC emacs-lisp
    ;;use xwidget-webkit
    ;; (setq browse-url-browser-function 'xwidget-webkit-browse-url)
    ;; (defun browse-url-default-browser (url &rest args)
    ;;   "Override `browse-url-default-browser' to use `xwidget-webkit' URL ARGS."
    ;;   (xwidget-webkit-browse-url url args))
    ;; (global-set-key (kbd "C-c w c") 'xwidget-webkit-copy-selection-as-kill)

    (use-package search-web
      :ensure t
      :init
      :bind (("C-C w u" . browse-url)
	     ("C-c w w" . search-web)
	     ("C-c w p" . search-web-at-point)
	     ("C-c w r" . search-web-region)))

    (use-package browse-at-remote
      :ensure t
      :bind ("C-c w g" . browse-at-remote))
  #+END_SRC

* LSP

  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :ensure t
      :defer 5
      :commands lsp)

    ;; optionally
    (use-package lsp-ui
      :ensure t
      :defer 5
      :commands lsp-ui-mode)

    ;; (use-package company-lsp
    ;;   :ensure t
    ;;   :commands company-lsp)

    ;; (use-package helm-lsp
    ;;   :ensure t
    ;;   :commands helm-lsp-workspace-symbol)

    (use-package lsp-python-ms
      :ensure t
      :defer 5
      :hook (python-mode . lsp)
      :config

      ;; for dev build of language server
      (setq lsp-python-ms-dir
	    (expand-file-name "~/python-language-server/output/bin/Release/"))
      ;; for executable of language server, if it's not symlinked on your PATH
      (setq lsp-python-ms-executable
	    "~/python-language-server/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer"))
  #+END_SRC

* Markdown

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :defer 5
      :mode (("README\\.md\\'" . gfm-mode)
	     ("\\.md\\'" . markdown-mode)
	     ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))

    (use-package markdown-preview-mode
      :ensure t)
  #+END_SRC

* ace-window

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :defer t
      :bind (("M-o" . ace-window))
      :config
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
	    (?M aw-swap-window "Swap Windows")
	    (?M aw-move-window "Move Window")
	    (?c aw-copy-window "Copy Window")
	    (?j aw-switch-buffer-in-window "Select Buffer")
	    (?n aw-flip-window)
	    (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	    (?c aw-split-window-fair "Split Fair Window")
	    (?v aw-split-window-vert "Split Vert Window")
	    (?b aw-split-window-horz "Split Horz Window")
	    (?o delete-other-windows "Delete Other Windows")
	    (?? aw-show-dispatch-help))
      "List of actions for `aw-dispatch-default'."))
  #+END_SRC
  
* Music

  #+BEGIN_SRC emacs-lisp
    (use-package bongo
      :ensure t
      :bind (("C-c m" . bongo-playlist))
      :init (setq bongo-default-directory "~/Music")
      :config
      (progn
	(bongo-playlist)
	(bongo-insert-directory "网易云音乐")))
  #+END_SRC

* Email

  #+BEGIN_SRC emacs-lisp
    (autoload 'wl "wl" "Wanderlust" t)
  #+END_SRC

* Proxy

  #+BEGIN_SRC emacs-lisp
    (use-package proxy-mode
      :ensure t
      :defer t
      :config
      (setq url-gateway-local-host-regexp
	  (concat "\\`" (regexp-opt '("localhost" "127.0.0.1")) "\\'")))
  #+END_SRC

* Podcast

  #+BEGIN_SRC emacs-lisp
    (use-package podcaster
      :ensure t
      :defer 5)
  #+END_SRC

* Hydra

  #+BEGIN_SRC emacs-lisp
    (use-package hydra
      :ensure t
      :defer 5)

    (defhydra hydra-launch (:color blue)
       "Launch"
       ("ec" (browse-url "https://www.emacs-china.org") "EmacsChina")
       ("ew" (browse-url "http://www.emacswiki.org/") "EmacsWiki")
       ("go" (browse-url "https://www.google.com") "Google")
       ("gt" (browse-url "https://www.github.com") "Github")
       ("mp" (browse-url "http://www.melpa.org/#/") "Melpa")
       ("v2" (browse-url "https://www.v2ex.com") "V2EX")
       ("yt" (browse-url "https://www.youtube.com") "YouTube")
       ("fd" (browse-url "https://feedly.com/i/latest") "Feedly")
       ("s" eshell "shell")
       ("q" nil "cancel"))
    (global-set-key (kbd "C-c r") 'hydra-launch/body)
  #+END_SRC

* Help

  #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :ensure t
      :defer 5
      :bind (("C-h f" . helpful-callable)
	     ("C-h v" . helpful-variable)
	     ("C-h k" . helpful-key)
	     ("C-c C-d" . helpful-at-point)
	     ("C-h F". helpful-function)
	     ("C-h C" . helpful-command)))
  #+END_SRC
* Django

  #+BEGIN_SRC emacs-lisp
    (use-package django-mode
      :ensure t)
  #+END_SRC
